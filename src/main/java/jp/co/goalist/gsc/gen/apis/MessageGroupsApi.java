/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.10.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package jp.co.goalist.gsc.gen.apis;

import jp.co.goalist.gsc.gen.dtos.ErrorResponse;
import jp.co.goalist.gsc.gen.dtos.MProfileDto;
import jp.co.goalist.gsc.gen.dtos.MSurveyListDto;
import jp.co.goalist.gsc.gen.dtos.MTemplateListDto;
import jp.co.goalist.gsc.gen.dtos.SurveySearchDto;
import jp.co.goalist.gsc.gen.dtos.TemplateSearchDto;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Validated
@Tag(name = "message-groups", description = "the message-groups API")
@SuppressWarnings("unused")
public interface MessageGroupsApi {

    /**
     * GET /message-groups/{id}/profile : Get applicant profile (メッセージ)
     * # Get applicant profile 
     *
     * @param id ID of the resource (required)
     * @return Get successfully (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "getApplicantProfiles",
        summary = "Get applicant profile (メッセージ)",
        description = "# Get applicant profile ",
        responses = {
            @ApiResponse(responseCode = "200", description = "Get successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MProfileDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/message-groups/{id}/profile",
        produces = { "application/json" }
    )
    
    ResponseEntity<MProfileDto> getApplicantProfiles(
        @Parameter(name = "id", description = "ID of the resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    );


    /**
     * POST /message-groups/surveys : Get list of surveys for chat (メッセージ・アンケート)
     * # Get list of surveys for chat 
     *
     * @param surveySearchDto  (required)
     * @return Get successfully (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "getSurveysForChat",
        summary = "Get list of surveys for chat (メッセージ・アンケート)",
        description = "# Get list of surveys for chat ",
        responses = {
            @ApiResponse(responseCode = "200", description = "Get successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MSurveyListDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/message-groups/surveys",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<MSurveyListDto> getSurveysForChat(
        @Parameter(name = "SurveySearchDto", description = "", required = true) @Valid @RequestBody SurveySearchDto surveySearchDto
    );


    /**
     * POST /message-groups/templates : Get list of templates for chat (メッセージ・テンプレート)
     * # Get list of templates for chat 
     *
     * @param templateSearchDto  (optional)
     * @return Get list successfully (status code 200)
     *         or Invalid input (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "getTemplatesForChat",
        summary = "Get list of templates for chat (メッセージ・テンプレート)",
        description = "# Get list of templates for chat ",
        responses = {
            @ApiResponse(responseCode = "200", description = "Get list successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MTemplateListDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid input", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/message-groups/templates",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<MTemplateListDto> getTemplatesForChat(
        @Parameter(name = "TemplateSearchDto", description = "") @Valid @RequestBody(required = false) TemplateSearchDto templateSearchDto
    );

}
