/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.10.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package jp.co.goalist.gsc.gen.apis;

import jp.co.goalist.gsc.gen.dtos.ErrorResponse;
import jp.co.goalist.gsc.gen.dtos.ProjectAdvertListDto;
import jp.co.goalist.gsc.gen.dtos.ProjectApplicantsDto;
import jp.co.goalist.gsc.gen.dtos.ProjectListDto;
import jp.co.goalist.gsc.gen.dtos.ProjectPermissionItemsDto;
import jp.co.goalist.gsc.gen.dtos.ProjectPermissionUpsertDto;
import jp.co.goalist.gsc.gen.dtos.ProjectSearchBoxDto;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Validated
@Tag(name = "projects", description = "the projects API")
@SuppressWarnings("unused")
public interface ProjectsApi {

    /**
     * POST /projects/csv/export : Download csv file for project screen (案件一覧)
     *
     * @param projectSearchBoxDto  (optional)
     * @return OK (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "downloadProjectCSV",
        summary = "Download csv file for project screen (案件一覧)",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK"),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/projects/csv/export",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> downloadProjectCSV(
        @Parameter(name = "ProjectSearchBoxDto", description = "") @Valid @RequestBody(required = false) ProjectSearchBoxDto projectSearchBoxDto
    );


    /**
     * GET /projects/{id}/application-count/{flowType} : Get application list for each status (案件の応募一覧)
     * # Get application list for each status 
     *
     * @param id ID of the resource (required)
     * @param flowType # Status type Enum:    - 1: 応募   - 2: 面接   - 3: 内定   - 4: 入社  (required)
     * @param pageNumber Page number (optional)
     * @param pageSize Number of items per page (optional)
     * @param arrangedBy order by (optional)
     * @return Get all applications (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or NotFound (status code 404)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "getApplicationListBasedOnFlowType",
        summary = "Get application list for each status (案件の応募一覧)",
        description = "# Get application list for each status ",
        responses = {
            @ApiResponse(responseCode = "200", description = "Get all applications", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProjectApplicantsDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "NotFound", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/projects/{id}/application-count/{flowType}",
        produces = { "application/json" }
    )
    
    ResponseEntity<ProjectApplicantsDto> getApplicationListBasedOnFlowType(
        @Parameter(name = "id", description = "ID of the resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "flowType", description = "# Status type Enum:    - 1: 応募   - 2: 面接   - 3: 内定   - 4: 入社 ", required = true, in = ParameterIn.PATH) @PathVariable("flowType") String flowType,
        @Min(1) @Parameter(name = "pageNumber", description = "Page number", in = ParameterIn.QUERY) @Valid @RequestParam(value = "pageNumber", required = false) Integer pageNumber,
        @Min(1) @Parameter(name = "pageSize", description = "Number of items per page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "pageSize", required = false) Integer pageSize,
        @Parameter(name = "arrangedBy", description = "order by", in = ParameterIn.QUERY) @Valid @RequestParam(value = "arrangedBy", required = false) String arrangedBy
    );


    /**
     * GET /projects/{id}/advertisements : Get project advertisements (案件情報・広告)
     * # Get advertisements of a project 
     *
     * @param id ID of the resource (required)
     * @return Get details of a project (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Unauthorized (status code 404)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "getProjectAdvertisements",
        summary = "Get project advertisements (案件情報・広告)",
        description = "# Get advertisements of a project ",
        responses = {
            @ApiResponse(responseCode = "200", description = "Get details of a project", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProjectAdvertListDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/projects/{id}/advertisements",
        produces = { "application/json" }
    )
    
    ResponseEntity<ProjectAdvertListDto> getProjectAdvertisements(
        @Parameter(name = "id", description = "ID of the resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    );


    /**
     * POST /projects/search : Get all projects (案件一覧)
     * # Get all projects 
     *
     * @param projectSearchBoxDto  (optional)
     * @return Get all projects (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "getProjectList",
        summary = "Get all projects (案件一覧)",
        description = "# Get all projects ",
        responses = {
            @ApiResponse(responseCode = "200", description = "Get all projects", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProjectListDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/projects/search",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<ProjectListDto> getProjectList(
        @Parameter(name = "ProjectSearchBoxDto", description = "") @Valid @RequestBody(required = false) ProjectSearchBoxDto projectSearchBoxDto
    );


    /**
     * POST /projects/branches/{id} : Get all projects for branch permission settings (支店名・職種権限)
     * # Get all projects for branch permission settings 
     *
     * @param id ID of the resource (required)
     * @param projectSearchBoxDto  (optional)
     * @return Get all projects (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "getProjectListForBranchPermission",
        summary = "Get all projects for branch permission settings (支店名・職種権限)",
        description = "# Get all projects for branch permission settings ",
        responses = {
            @ApiResponse(responseCode = "200", description = "Get all projects", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ProjectPermissionItemsDto.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/projects/branches/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<List<ProjectPermissionItemsDto>> getProjectListForBranchPermission(
        @Parameter(name = "id", description = "ID of the resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "ProjectSearchBoxDto", description = "") @Valid @RequestBody(required = false) ProjectSearchBoxDto projectSearchBoxDto
    );


    /**
     * PUT /projects/branches/{id}/permissions : Save projects setting for branch permission settings (支店名・職種権限)
     * # Save projects setting for branch permission settings 
     *
     * @param id ID of the resource (required)
     * @param projectPermissionUpsertDto  (optional)
     * @return Update successfully (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "saveBranchPermissionSetting",
        summary = "Save projects setting for branch permission settings (支店名・職種権限)",
        description = "# Save projects setting for branch permission settings ",
        responses = {
            @ApiResponse(responseCode = "200", description = "Update successfully"),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/projects/branches/{id}/permissions",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> saveBranchPermissionSetting(
        @Parameter(name = "id", description = "ID of the resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "ProjectPermissionUpsertDto", description = "") @Valid @RequestBody(required = false) ProjectPermissionUpsertDto projectPermissionUpsertDto
    );

}
