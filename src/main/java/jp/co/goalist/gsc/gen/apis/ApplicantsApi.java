/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.10.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package jp.co.goalist.gsc.gen.apis;

import jp.co.goalist.gsc.gen.dtos.ApplicantDetailsDto;
import jp.co.goalist.gsc.gen.dtos.ApplicantListDto;
import jp.co.goalist.gsc.gen.dtos.ApplicantMemoDto;
import jp.co.goalist.gsc.gen.dtos.ApplicantProjectDto;
import jp.co.goalist.gsc.gen.dtos.ApplicantSearchDto;
import jp.co.goalist.gsc.gen.dtos.ApplicantStatusCountDto;
import jp.co.goalist.gsc.gen.dtos.ApplicantStatusUpsertDto;
import jp.co.goalist.gsc.gen.dtos.ApplicantUpsertDto;
import jp.co.goalist.gsc.gen.dtos.ErrorResponse;
import jp.co.goalist.gsc.gen.dtos.HistoryCallDetailsDto;
import jp.co.goalist.gsc.gen.dtos.HistoryCallItemsDto;
import jp.co.goalist.gsc.gen.dtos.HistoryCallMemoDto;
import jp.co.goalist.gsc.gen.dtos.HistoryCallUpsertDto;
import jp.co.goalist.gsc.gen.dtos.SelectedIds;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Validated
@Tag(name = "applicants", description = "the applicants API")
@SuppressWarnings("unused")
public interface ApplicantsApi {

    /**
     * GET /applicants/count : Count Applications (status has not changed)
     * #  Count Applications (status has not changed) 
     *
     * @return Get successfully (status code 200)
     *         or Invalid input (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "countApplicationStatusNotChanged",
        summary = "Count Applications (status has not changed)",
        description = "#  Count Applications (status has not changed) ",
        responses = {
            @ApiResponse(responseCode = "200", description = "Get successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApplicantStatusCountDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid input", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/applicants/count",
        produces = { "application/json" }
    )
    
    ResponseEntity<ApplicantStatusCountDto> countApplicationStatusNotChanged(
        
    );


    /**
     * GET /applicants/new-count : Count New Applications
     * #  count new applications 
     *
     * @return Get successfully (status code 200)
     *         or Invalid input (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "countNewApplications",
        summary = "Count New Applications",
        description = "#  count new applications ",
        responses = {
            @ApiResponse(responseCode = "200", description = "Get successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApplicantStatusCountDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid input", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/applicants/new-count",
        produces = { "application/json" }
    )
    
    ResponseEntity<ApplicantStatusCountDto> countNewApplications(
        
    );


    /**
     * POST /applicants : Create a new applicant (応募者)
     * # Create a new applicant 
     *
     * @param applicantUpsertDto  (required)
     * @return Created successfully (status code 201)
     *         or Invalid input (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "createNewApplicant",
        summary = "Create a new applicant (応募者)",
        description = "# Create a new applicant ",
        responses = {
            @ApiResponse(responseCode = "201", description = "Created successfully"),
            @ApiResponse(responseCode = "400", description = "Invalid input", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/applicants",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> createNewApplicant(
        @Parameter(name = "ApplicantUpsertDto", description = "", required = true) @Valid @RequestBody ApplicantUpsertDto applicantUpsertDto
    );


    /**
     * POST /applicants/{applicantId}/history-calls : Create a history call (通話履歴)
     * # Create a history call 
     *
     * @param applicantId ID of the resource (required)
     * @param historyCallUpsertDto  (optional)
     * @return Saved successfully (status code 201)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "createNewHistoryCall",
        summary = "Create a history call (通話履歴)",
        description = "# Create a history call ",
        responses = {
            @ApiResponse(responseCode = "201", description = "Saved successfully"),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/applicants/{applicantId}/history-calls",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> createNewHistoryCall(
        @Parameter(name = "applicantId", description = "ID of the resource", required = true, in = ParameterIn.PATH) @PathVariable("applicantId") String applicantId,
        @Parameter(name = "HistoryCallUpsertDto", description = "") @Valid @RequestBody(required = false) HistoryCallUpsertDto historyCallUpsertDto
    );


    /**
     * DELETE /applicants : Delete selected applicants (応募者)
     *
     * @param selectedIds  (optional)
     * @return OK (status code 200)
     *         or Bad Validation (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "deleteSelectedApplicants",
        summary = "Delete selected applicants (応募者)",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK"),
            @ApiResponse(responseCode = "400", description = "Bad Validation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/applicants",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> deleteSelectedApplicants(
        @Parameter(name = "SelectedIds", description = "") @Valid @RequestBody(required = false) SelectedIds selectedIds
    );


    /**
     * DELETE /applicants/{applicantId}/history-calls : Delete selected call histories (通話履歴)
     *
     * @param applicantId ID of the resource (required)
     * @param selectedIds  (optional)
     * @return OK (status code 200)
     *         or Bad Validation (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "deleteSelectedHistories",
        summary = "Delete selected call histories (通話履歴)",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK"),
            @ApiResponse(responseCode = "400", description = "Bad Validation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/applicants/{applicantId}/history-calls",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> deleteSelectedHistories(
        @Parameter(name = "applicantId", description = "ID of the resource", required = true, in = ParameterIn.PATH) @PathVariable("applicantId") String applicantId,
        @Parameter(name = "SelectedIds", description = "") @Valid @RequestBody(required = false) SelectedIds selectedIds
    );


    /**
     * POST /applicants/csv/exports : Download csv file for applicant screen (応募者一覧)
     *
     * @param applicantSearchDto  (optional)
     * @return OK (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "downloadApplicantCSV",
        summary = "Download csv file for applicant screen (応募者一覧)",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK"),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/applicants/csv/exports",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> downloadApplicantCSV(
        @Parameter(name = "ApplicantSearchDto", description = "") @Valid @RequestBody(required = false) ApplicantSearchDto applicantSearchDto
    );


    /**
     * PUT /applicants/{id} : Edit a new applicant (応募者)
     * # Edit a new applicant 
     *
     * @param id ID of the resource (required)
     * @param applicantUpsertDto  (required)
     * @return Created successfully (status code 201)
     *         or Invalid input (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or NotFound (status code 404)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "editApplicant",
        summary = "Edit a new applicant (応募者)",
        description = "# Edit a new applicant ",
        responses = {
            @ApiResponse(responseCode = "201", description = "Created successfully"),
            @ApiResponse(responseCode = "400", description = "Invalid input", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "NotFound", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/applicants/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> editApplicant(
        @Parameter(name = "id", description = "ID of the resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "ApplicantUpsertDto", description = "", required = true) @Valid @RequestBody ApplicantUpsertDto applicantUpsertDto
    );


    /**
     * PUT /applicants/{id}/memo : Edit a applicant memo (応募者)
     * # Edit a applicant memo 
     *
     * @param id ID of the resource (required)
     * @param applicantMemoDto  (required)
     * @return Save successfully (status code 200)
     *         or Bad Validation (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Unauthorized (status code 404)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "editApplicantMemo",
        summary = "Edit a applicant memo (応募者)",
        description = "# Edit a applicant memo ",
        responses = {
            @ApiResponse(responseCode = "200", description = "Save successfully"),
            @ApiResponse(responseCode = "400", description = "Bad Validation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/applicants/{id}/memo",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> editApplicantMemo(
        @Parameter(name = "id", description = "ID of the resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "ApplicantMemoDto", description = "", required = true) @Valid @RequestBody ApplicantMemoDto applicantMemoDto
    );


    /**
     * PUT /applicants/{id}/project : Pick project for an applicant (応募者)
     * # Pick project for an applicant 
     *
     * @param id ID of the resource (required)
     * @param applicantProjectDto  (required)
     * @return Save successfully (status code 200)
     *         or Bad Validation (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Unauthorized (status code 404)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "editApplicantProject",
        summary = "Pick project for an applicant (応募者)",
        description = "# Pick project for an applicant ",
        responses = {
            @ApiResponse(responseCode = "200", description = "Save successfully"),
            @ApiResponse(responseCode = "400", description = "Bad Validation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/applicants/{id}/project",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> editApplicantProject(
        @Parameter(name = "id", description = "ID of the resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "ApplicantProjectDto", description = "", required = true) @Valid @RequestBody ApplicantProjectDto applicantProjectDto
    );


    /**
     * PUT /applicants/{id}/status : Edit a applicant status
     * # Edit a applicant status by a dropdown 
     *
     * @param id ID of the resource (required)
     * @param applicantStatusUpsertDto  (required)
     * @return Save successfully (status code 200)
     *         or Bad Validation (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Unauthorized (status code 404)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "editApplicantStatus",
        summary = "Edit a applicant status",
        description = "# Edit a applicant status by a dropdown ",
        responses = {
            @ApiResponse(responseCode = "200", description = "Save successfully"),
            @ApiResponse(responseCode = "400", description = "Bad Validation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/applicants/{id}/status",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> editApplicantStatus(
        @Parameter(name = "id", description = "ID of the resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "ApplicantStatusUpsertDto", description = "", required = true) @Valid @RequestBody ApplicantStatusUpsertDto applicantStatusUpsertDto
    );


    /**
     * PUT /applicants/{applicantId}/history-calls/{id} : Edit a history call (通話履歴)
     * # Edit a history call 
     *
     * @param applicantId ID of the resource (required)
     * @param id ID of the resource (required)
     * @param historyCallUpsertDto  (required)
     * @return History call updated successfully (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "editHistoryCall",
        summary = "Edit a history call (通話履歴)",
        description = "# Edit a history call ",
        responses = {
            @ApiResponse(responseCode = "200", description = "History call updated successfully"),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/applicants/{applicantId}/history-calls/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> editHistoryCall(
        @Parameter(name = "applicantId", description = "ID of the resource", required = true, in = ParameterIn.PATH) @PathVariable("applicantId") String applicantId,
        @Parameter(name = "id", description = "ID of the resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "HistoryCallUpsertDto", description = "", required = true) @Valid @RequestBody HistoryCallUpsertDto historyCallUpsertDto
    );


    /**
     * PUT /applicants/{applicantId}/history-calls/{id}/memo : Edit a history call memo (通話履歴)
     * # Edit a history call memo 
     *
     * @param applicantId ID of the resource (required)
     * @param id ID of the resource (required)
     * @param historyCallMemoDto  (required)
     * @return Save successfully (status code 200)
     *         or Bad Validation (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Unauthorized (status code 404)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "editHistoryCallMemo",
        summary = "Edit a history call memo (通話履歴)",
        description = "# Edit a history call memo ",
        responses = {
            @ApiResponse(responseCode = "200", description = "Save successfully"),
            @ApiResponse(responseCode = "400", description = "Bad Validation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/applicants/{applicantId}/history-calls/{id}/memo",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> editHistoryCallMemo(
        @Parameter(name = "applicantId", description = "ID of the resource", required = true, in = ParameterIn.PATH) @PathVariable("applicantId") String applicantId,
        @Parameter(name = "id", description = "ID of the resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "HistoryCallMemoDto", description = "", required = true) @Valid @RequestBody HistoryCallMemoDto historyCallMemoDto
    );


    /**
     * GET /applicants/{id} : Get Applicant Detail (応募者)
     * # Get list of applicants 
     *
     * @param id ID of the resource (required)
     * @return Get successfully (status code 200)
     *         or Invalid input (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or NotFound (status code 404)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "getApplicantDetails",
        summary = "Get Applicant Detail (応募者)",
        description = "# Get list of applicants ",
        responses = {
            @ApiResponse(responseCode = "200", description = "Get successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApplicantDetailsDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid input", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "NotFound", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/applicants/{id}",
        produces = { "application/json" }
    )
    
    ResponseEntity<ApplicantDetailsDto> getApplicantDetails(
        @Parameter(name = "id", description = "ID of the resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    );


    /**
     * POST /applicants/list : Get list of applicants (応募者)
     * # Get list of applicants with search condition 
     *
     * @param applicantSearchDto  (optional)
     * @return Get list successfully (status code 200)
     *         or Invalid input (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "getApplicants",
        summary = "Get list of applicants (応募者)",
        description = "# Get list of applicants with search condition ",
        responses = {
            @ApiResponse(responseCode = "200", description = "Get list successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApplicantListDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid input", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/applicants/list",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<ApplicantListDto> getApplicants(
        @Parameter(name = "ApplicantSearchDto", description = "") @Valid @RequestBody(required = false) ApplicantSearchDto applicantSearchDto
    );


    /**
     * GET /applicants/{applicantId}/history-calls/{id} : Get details of a history call (通話履歴)
     * # Get details of a history call 
     *
     * @param applicantId ID of the resource (required)
     * @param id ID of the resource (required)
     * @return Get details of a history call (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Unauthorized (status code 404)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "getHistoryCallDetails",
        summary = "Get details of a history call (通話履歴)",
        description = "# Get details of a history call ",
        responses = {
            @ApiResponse(responseCode = "200", description = "Get details of a history call", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = HistoryCallDetailsDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/applicants/{applicantId}/history-calls/{id}",
        produces = { "application/json" }
    )
    
    ResponseEntity<HistoryCallDetailsDto> getHistoryCallDetails(
        @Parameter(name = "applicantId", description = "ID of the resource", required = true, in = ParameterIn.PATH) @PathVariable("applicantId") String applicantId,
        @Parameter(name = "id", description = "ID of the resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    );


    /**
     * GET /applicants/{applicantId}/history-calls : Get list of history calls (通話履歴)
     * # Get list of history calls 
     *
     * @param applicantId ID of the resource (required)
     * @return Get list successfully (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "getHistoryCalls",
        summary = "Get list of history calls (通話履歴)",
        description = "# Get list of history calls ",
        responses = {
            @ApiResponse(responseCode = "200", description = "Get list successfully", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = HistoryCallItemsDto.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/applicants/{applicantId}/history-calls",
        produces = { "application/json" }
    )
    
    ResponseEntity<List<HistoryCallItemsDto>> getHistoryCalls(
        @Parameter(name = "applicantId", description = "ID of the resource", required = true, in = ParameterIn.PATH) @PathVariable("applicantId") String applicantId
    );

}
