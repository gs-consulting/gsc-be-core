/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.10.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package jp.co.goalist.gsc.gen.apis;

import jp.co.goalist.gsc.gen.dtos.DApplicantItemsDto;
import jp.co.goalist.gsc.gen.dtos.DChatItemsDto;
import jp.co.goalist.gsc.gen.dtos.DInterviewItemsDto;
import jp.co.goalist.gsc.gen.dtos.DNotificationDetailsDto;
import jp.co.goalist.gsc.gen.dtos.DNotificationItemsDto;
import jp.co.goalist.gsc.gen.dtos.DProjectItemsDto;
import jp.co.goalist.gsc.gen.dtos.ErrorResponse;
import jp.co.goalist.gsc.gen.dtos.StatisticsListDto;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Validated
@Tag(name = "dashboard", description = "the dashboard API")
@SuppressWarnings("unused")
public interface DashboardApi {

    /**
     * GET /dashboard/applications : Get all application statistics (ダッシュボード)
     * # Get all application statistics 
     *
     * @return Get list successfully (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "getApplicationStatistics",
        summary = "Get all application statistics (ダッシュボード)",
        description = "# Get all application statistics ",
        responses = {
            @ApiResponse(responseCode = "200", description = "Get list successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = StatisticsListDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/dashboard/applications",
        produces = { "application/json" }
    )
    
    ResponseEntity<StatisticsListDto> getApplicationStatistics(
        
    );


    /**
     * GET /dashboard/new-chats : Get all chats (ダッシュボード)
     * # Get all chats 
     *
     * @return Get list successfully (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "getChats",
        summary = "Get all chats (ダッシュボード)",
        description = "# Get all chats ",
        responses = {
            @ApiResponse(responseCode = "200", description = "Get list successfully", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = DChatItemsDto.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/dashboard/new-chats",
        produces = { "application/json" }
    )
    
    ResponseEntity<List<DChatItemsDto>> getChats(
        
    );


    /**
     * GET /dashboard/notifications/{id} : Get notifications details (ダッシュボード)
     * # Get all notifications 
     *
     * @param id ID of the resource (required)
     * @return Get list successfully (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "getDNotificationDetails",
        summary = "Get notifications details (ダッシュボード)",
        description = "# Get all notifications ",
        responses = {
            @ApiResponse(responseCode = "200", description = "Get list successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DNotificationDetailsDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/dashboard/notifications/{id}",
        produces = { "application/json" }
    )
    
    ResponseEntity<DNotificationDetailsDto> getDNotificationDetails(
        @Parameter(name = "id", description = "ID of the resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    );


    /**
     * GET /dashboard/interviews : Get all interviews (ダッシュボード)
     * # Get all interviews 
     *
     * @return Get list successfully (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "getInterviews",
        summary = "Get all interviews (ダッシュボード)",
        description = "# Get all interviews ",
        responses = {
            @ApiResponse(responseCode = "200", description = "Get list successfully", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = DInterviewItemsDto.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/dashboard/interviews",
        produces = { "application/json" }
    )
    
    ResponseEntity<List<DInterviewItemsDto>> getInterviews(
        
    );


    /**
     * GET /dashboard/new-applicants : Get all new applicants (ダッシュボード)
     * # Get all new applicants 
     *
     * @return Get list successfully (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "getNewApplicants",
        summary = "Get all new applicants (ダッシュボード)",
        description = "# Get all new applicants ",
        responses = {
            @ApiResponse(responseCode = "200", description = "Get list successfully", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = DApplicantItemsDto.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/dashboard/new-applicants",
        produces = { "application/json" }
    )
    
    ResponseEntity<List<DApplicantItemsDto>> getNewApplicants(
        
    );


    /**
     * GET /dashboard/notifications : Get all notifications (ダッシュボード)
     * # Get all notifications 
     *
     * @return Get list successfully (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "getNotifications",
        summary = "Get all notifications (ダッシュボード)",
        description = "# Get all notifications ",
        responses = {
            @ApiResponse(responseCode = "200", description = "Get list successfully", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = DNotificationItemsDto.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/dashboard/notifications",
        produces = { "application/json" }
    )
    
    ResponseEntity<List<DNotificationItemsDto>> getNotifications(
        
    );


    /**
     * GET /dashboard/projects : Get all projects (ダッシュボード)
     * # Get all projects 
     *
     * @return Get list successfully (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "getProjects",
        summary = "Get all projects (ダッシュボード)",
        description = "# Get all projects ",
        responses = {
            @ApiResponse(responseCode = "200", description = "Get list successfully", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = DProjectItemsDto.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/dashboard/projects",
        produces = { "application/json" }
    )
    
    ResponseEntity<List<DProjectItemsDto>> getProjects(
        
    );

}
