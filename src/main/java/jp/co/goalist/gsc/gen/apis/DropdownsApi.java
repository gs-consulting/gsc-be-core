/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.10.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package jp.co.goalist.gsc.gen.apis;

import jp.co.goalist.gsc.gen.dtos.ErrorResponse;
import jp.co.goalist.gsc.gen.dtos.MDropdownListDto;
import jp.co.goalist.gsc.gen.dtos.MPostCodeDto;
import jp.co.goalist.gsc.gen.dtos.MTPrefectureItemsDto;
import jp.co.goalist.gsc.gen.dtos.MediaDropdownListDto;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Validated
@Tag(name = "dropdowns", description = "the dropdowns API")
@SuppressWarnings("unused")
public interface DropdownsApi {

    /**
     * GET /dropdowns/postcode/{postCode} : Get address information by post code
     *
     * @param postCode 郵便番号  (required)
     * @return OK (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "getAddressByPostCode",
        summary = "Get address information by post code",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MPostCodeDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/dropdowns/postcode/{postCode}",
        produces = { "application/json" }
    )
    
    ResponseEntity<MPostCodeDto> getAddressByPostCode(
        @Parameter(name = "postCode", description = "郵便番号 ", required = true, in = ParameterIn.PATH) @PathVariable("postCode") String postCode
    );


    /**
     * GET /dropdowns/client-accounts/managers : Get list of client accounts for managers position (クライアント・担当者)
     * # Get list of client accounts for managers position (クライアント・担当者) 
     *
     * @param isInterviewer 面接者のみ (optional, default to false)
     * @return Get list successfully (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "getClientAccountsDropdown",
        summary = "Get list of client accounts for managers position (クライアント・担当者)",
        description = "# Get list of client accounts for managers position (クライアント・担当者) ",
        responses = {
            @ApiResponse(responseCode = "200", description = "Get list successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MDropdownListDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/dropdowns/client-accounts/managers",
        produces = { "application/json" }
    )
    
    ResponseEntity<MDropdownListDto> getClientAccountsDropdown(
        @Parameter(name = "isInterviewer", description = "面接者のみ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "isInterviewer", required = false, defaultValue = "false") Boolean isInterviewer
    );


    /**
     * GET /dropdowns/client-accounts/applicants : Get list of applicant columns for master media screen
     * # Get list of applicant columns for master media screen 
     *
     * @return Get list successfully (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "getClientApplicantColumnsDropdown",
        summary = "Get list of applicant columns for master media screen",
        description = "# Get list of applicant columns for master media screen ",
        responses = {
            @ApiResponse(responseCode = "200", description = "Get list successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MDropdownListDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/dropdowns/client-accounts/applicants",
        produces = { "application/json" }
    )
    
    ResponseEntity<MDropdownListDto> getClientApplicantColumnsDropdown(
        
    );


    /**
     * GET /dropdowns/client-accounts/branches : Get list of branches for oem accounts (OEM・チーム)
     * # Get list of branches for oem accounts (OEM・チーム) 
     *
     * @return Get list successfully (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "getClientBranchesDropdown",
        summary = "Get list of branches for oem accounts (OEM・チーム)",
        description = "# Get list of branches for oem accounts (OEM・チーム) ",
        responses = {
            @ApiResponse(responseCode = "200", description = "Get list successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MDropdownListDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/dropdowns/client-accounts/branches",
        produces = { "application/json" }
    )
    
    ResponseEntity<MDropdownListDto> getClientBranchesDropdown(
        
    );


    /**
     * GET /dropdowns/client-accounts/medias : Get list of medias for oem accounts (OEM・媒体マスタ)
     * # Get list of medias for oem accounts (OEM・媒体マスタ) 
     *
     * @param projectId 案件ID (optional)
     * @param applicantId 応募者ID (optional)
     * @return Get list successfully (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "getClientMediaDropdown",
        summary = "Get list of medias for oem accounts (OEM・媒体マスタ)",
        description = "# Get list of medias for oem accounts (OEM・媒体マスタ) ",
        responses = {
            @ApiResponse(responseCode = "200", description = "Get list successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MediaDropdownListDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/dropdowns/client-accounts/medias",
        produces = { "application/json" }
    )
    
    ResponseEntity<MediaDropdownListDto> getClientMediaDropdown(
        @Parameter(name = "projectId", description = "案件ID", in = ParameterIn.QUERY) @Valid @RequestParam(value = "projectId", required = false) String projectId,
        @Parameter(name = "applicantId", description = "応募者ID", in = ParameterIn.QUERY) @Valid @RequestParam(value = "applicantId", required = false) String applicantId
    );


    /**
     * GET /dropdowns/client-accounts/projects : Get list of applicant columns for master media screen
     * # Get list of applicant columns for master media screen 
     *
     * @return Get list successfully (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "getClientProjectsDropdown",
        summary = "Get list of applicant columns for master media screen",
        description = "# Get list of applicant columns for master media screen ",
        responses = {
            @ApiResponse(responseCode = "200", description = "Get list successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MDropdownListDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/dropdowns/client-accounts/projects",
        produces = { "application/json" }
    )
    
    ResponseEntity<MDropdownListDto> getClientProjectsDropdown(
        
    );


    /**
     * GET /dropdowns/client-accounts/master-data/{statusId} : Get list of statuses for oem accounts (OEM・チーム)
     * # Get list of statuses for oem accounts (OEM・チーム) 
     *
     * @param statusId 案件ステータス  (required)
     * @return Get list successfully (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "getClientStatusDropdown",
        summary = "Get list of statuses for oem accounts (OEM・チーム)",
        description = "# Get list of statuses for oem accounts (OEM・チーム) ",
        responses = {
            @ApiResponse(responseCode = "200", description = "Get list successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MDropdownListDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/dropdowns/client-accounts/master-data/{statusId}",
        produces = { "application/json" }
    )
    
    ResponseEntity<MDropdownListDto> getClientStatusDropdown(
        @Parameter(name = "statusId", description = "案件ステータス ", required = true, in = ParameterIn.PATH) @PathVariable("statusId") String statusId
    );


    /**
     * GET /dropdowns/client-accounts/stores : Get list of branches for oem accounts (OEM・拠点・店舗)
     * # Get list of stores for oem accounts (OEM・拠点・店舗) 
     *
     * @param branchIds 支店 (optional)
     * @return Get list successfully (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "getClientStoresDropdown",
        summary = "Get list of branches for oem accounts (OEM・拠点・店舗)",
        description = "# Get list of stores for oem accounts (OEM・拠点・店舗) ",
        responses = {
            @ApiResponse(responseCode = "200", description = "Get list successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MDropdownListDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/dropdowns/client-accounts/stores",
        produces = { "application/json" }
    )
    
    ResponseEntity<MDropdownListDto> getClientStoresDropdown(
        @Parameter(name = "branchIds", description = "支店", in = ParameterIn.QUERY) @Valid @RequestParam(value = "branchIds", required = false) List<String> branchIds
    );


    /**
     * GET /dropdowns/prefectures : Get list of prefectures (都道府県)
     * # Get list of prefectures 
     *
     * @return Get list successfully (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "getMasterPrefectures",
        summary = "Get list of prefectures (都道府県)",
        description = "# Get list of prefectures ",
        responses = {
            @ApiResponse(responseCode = "200", description = "Get list successfully", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = MTPrefectureItemsDto.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/dropdowns/prefectures",
        produces = { "application/json" }
    )
    
    ResponseEntity<List<MTPrefectureItemsDto>> getMasterPrefectures(
        
    );


    /**
     * GET /dropdowns/oem-accounts/branches : Get list of branches for oem accounts (OEM・チーム)
     * # Get list of branches for oem accounts (OEM・チーム) 
     *
     * @param pageNumber Page number (optional)
     * @param pageSize Number of items per page (optional)
     * @param clientAccountId クライアント (optional)
     * @param storeId 拠点・店舗 (optional)
     * @return Get list successfully (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "getOemBranches",
        summary = "Get list of branches for oem accounts (OEM・チーム)",
        description = "# Get list of branches for oem accounts (OEM・チーム) ",
        responses = {
            @ApiResponse(responseCode = "200", description = "Get list successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MDropdownListDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/dropdowns/oem-accounts/branches",
        produces = { "application/json" }
    )
    
    ResponseEntity<MDropdownListDto> getOemBranches(
        @Min(1) @Parameter(name = "pageNumber", description = "Page number", in = ParameterIn.QUERY) @Valid @RequestParam(value = "pageNumber", required = false) Integer pageNumber,
        @Min(1) @Parameter(name = "pageSize", description = "Number of items per page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "pageSize", required = false) Integer pageSize,
        @Parameter(name = "clientAccountId", description = "クライアント", in = ParameterIn.QUERY) @Valid @RequestParam(value = "clientAccountId", required = false) String clientAccountId,
        @Parameter(name = "storeId", description = "拠点・店舗", in = ParameterIn.QUERY) @Valid @RequestParam(value = "storeId", required = false) String storeId
    );


    /**
     * GET /dropdowns/oem-accounts/clients : Get list of client accounts for oem accounts (OEM・クライアント)
     * # Get list of client accounts for oem accounts (OEM・クライアント) 
     *
     * @param pageNumber Page number (optional)
     * @param pageSize Number of items per page (optional)
     * @param managerId 担当者 (optional)
     * @param branchId 支店 (optional)
     * @param storeId 拠点・店舗 (optional)
     * @return Get list successfully (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "getOemClients",
        summary = "Get list of client accounts for oem accounts (OEM・クライアント)",
        description = "# Get list of client accounts for oem accounts (OEM・クライアント) ",
        responses = {
            @ApiResponse(responseCode = "200", description = "Get list successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MDropdownListDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/dropdowns/oem-accounts/clients",
        produces = { "application/json" }
    )
    
    ResponseEntity<MDropdownListDto> getOemClients(
        @Min(1) @Parameter(name = "pageNumber", description = "Page number", in = ParameterIn.QUERY) @Valid @RequestParam(value = "pageNumber", required = false) Integer pageNumber,
        @Min(1) @Parameter(name = "pageSize", description = "Number of items per page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "pageSize", required = false) Integer pageSize,
        @Parameter(name = "managerId", description = "担当者", in = ParameterIn.QUERY) @Valid @RequestParam(value = "managerId", required = false) String managerId,
        @Parameter(name = "branchId", description = "支店", in = ParameterIn.QUERY) @Valid @RequestParam(value = "branchId", required = false) String branchId,
        @Parameter(name = "storeId", description = "拠点・店舗", in = ParameterIn.QUERY) @Valid @RequestParam(value = "storeId", required = false) String storeId
    );


    /**
     * GET /dropdowns/oem-accounts/managers : Get list of oem accounts for oem client accounts (OEM・担当者)
     * # Get list of oem accounts for oem client accounts (OEM・担当者) 
     *
     * @param pageNumber Page number (optional)
     * @param pageSize Number of items per page (optional)
     * @param teamId チーム (optional)
     * @return Get list successfully (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "getOemManagers",
        summary = "Get list of oem accounts for oem client accounts (OEM・担当者)",
        description = "# Get list of oem accounts for oem client accounts (OEM・担当者) ",
        responses = {
            @ApiResponse(responseCode = "200", description = "Get list successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MDropdownListDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/dropdowns/oem-accounts/managers",
        produces = { "application/json" }
    )
    
    ResponseEntity<MDropdownListDto> getOemManagers(
        @Min(1) @Parameter(name = "pageNumber", description = "Page number", in = ParameterIn.QUERY) @Valid @RequestParam(value = "pageNumber", required = false) Integer pageNumber,
        @Min(1) @Parameter(name = "pageSize", description = "Number of items per page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "pageSize", required = false) Integer pageSize,
        @Parameter(name = "teamId", description = "チーム", in = ParameterIn.QUERY) @Valid @RequestParam(value = "teamId", required = false) String teamId
    );


    /**
     * GET /dropdowns/oem-accounts/projects : Get list of projects for oem client accounts (OEM・案件)
     * # Get list of projects for oem client accounts (OEM・案件) 
     *
     * @param pageNumber Page number (optional)
     * @param pageSize Number of items per page (optional)
     * @param storeId 拠点・店舗 (optional)
     * @return Get list successfully (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "getOemProjects",
        summary = "Get list of projects for oem client accounts (OEM・案件)",
        description = "# Get list of projects for oem client accounts (OEM・案件) ",
        responses = {
            @ApiResponse(responseCode = "200", description = "Get list successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MDropdownListDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/dropdowns/oem-accounts/projects",
        produces = { "application/json" }
    )
    
    ResponseEntity<MDropdownListDto> getOemProjects(
        @Min(1) @Parameter(name = "pageNumber", description = "Page number", in = ParameterIn.QUERY) @Valid @RequestParam(value = "pageNumber", required = false) Integer pageNumber,
        @Min(1) @Parameter(name = "pageSize", description = "Number of items per page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "pageSize", required = false) Integer pageSize,
        @Parameter(name = "storeId", description = "拠点・店舗", in = ParameterIn.QUERY) @Valid @RequestParam(value = "storeId", required = false) String storeId
    );


    /**
     * GET /dropdowns/oem-accounts/staffs : Get list of staffs for oem accounts (OEM・スタッフ)
     * # Get list of staffs for oem accounts (OEM・スタッフ) 
     *
     * @param pageNumber Page number (optional)
     * @param pageSize Number of items per page (optional)
     * @return Get list successfully (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "getOemStaffs",
        summary = "Get list of staffs for oem accounts (OEM・スタッフ)",
        description = "# Get list of staffs for oem accounts (OEM・スタッフ) ",
        responses = {
            @ApiResponse(responseCode = "200", description = "Get list successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MDropdownListDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/dropdowns/oem-accounts/staffs",
        produces = { "application/json" }
    )
    
    ResponseEntity<MDropdownListDto> getOemStaffs(
        @Min(1) @Parameter(name = "pageNumber", description = "Page number", in = ParameterIn.QUERY) @Valid @RequestParam(value = "pageNumber", required = false) Integer pageNumber,
        @Min(1) @Parameter(name = "pageSize", description = "Number of items per page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "pageSize", required = false) Integer pageSize
    );


    /**
     * GET /dropdowns/oem-accounts/stores : Get list of branches for oem accounts (OEM・拠点・店舗)
     * # Get list of stores for oem accounts (OEM・拠点・店舗) 
     *
     * @param pageNumber Page number (optional)
     * @param pageSize Number of items per page (optional)
     * @param branchIds 支店 (optional)
     * @param clientAccountId クライアント (optional)
     * @param isAll すべての取得 (optional, default to 0)
     * @return Get list successfully (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "getOemStores",
        summary = "Get list of branches for oem accounts (OEM・拠点・店舗)",
        description = "# Get list of stores for oem accounts (OEM・拠点・店舗) ",
        responses = {
            @ApiResponse(responseCode = "200", description = "Get list successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MDropdownListDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/dropdowns/oem-accounts/stores",
        produces = { "application/json" }
    )
    
    ResponseEntity<MDropdownListDto> getOemStores(
        @Min(1) @Parameter(name = "pageNumber", description = "Page number", in = ParameterIn.QUERY) @Valid @RequestParam(value = "pageNumber", required = false) Integer pageNumber,
        @Min(1) @Parameter(name = "pageSize", description = "Number of items per page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "pageSize", required = false) Integer pageSize,
        @Parameter(name = "branchIds", description = "支店", in = ParameterIn.QUERY) @Valid @RequestParam(value = "branchIds", required = false) List<String> branchIds,
        @Parameter(name = "clientAccountId", description = "クライアント", in = ParameterIn.QUERY) @Valid @RequestParam(value = "clientAccountId", required = false) String clientAccountId,
        @Parameter(name = "isAll", description = "すべての取得", in = ParameterIn.QUERY) @Valid @RequestParam(value = "isAll", required = false, defaultValue = "0") Integer isAll
    );


    /**
     * GET /dropdowns/oem-accounts/teams : Get list of teams for oem accounts (OEM・チーム)
     * # Get list of teams for oem accounts (OEM・チーム) 
     *
     * @param pageNumber Page number (optional)
     * @param pageSize Number of items per page (optional)
     * @param oemId OEMアカウントトID (optional)
     * @return Get list successfully (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "getOemTeams",
        summary = "Get list of teams for oem accounts (OEM・チーム)",
        description = "# Get list of teams for oem accounts (OEM・チーム) ",
        responses = {
            @ApiResponse(responseCode = "200", description = "Get list successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MDropdownListDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/dropdowns/oem-accounts/teams",
        produces = { "application/json" }
    )
    
    ResponseEntity<MDropdownListDto> getOemTeams(
        @Min(1) @Parameter(name = "pageNumber", description = "Page number", in = ParameterIn.QUERY) @Valid @RequestParam(value = "pageNumber", required = false) Integer pageNumber,
        @Min(1) @Parameter(name = "pageSize", description = "Number of items per page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "pageSize", required = false) Integer pageSize,
        @Parameter(name = "oemId", description = "OEMアカウントトID", in = ParameterIn.QUERY) @Valid @RequestParam(value = "oemId", required = false) String oemId
    );


    /**
     * GET /dropdowns/operator-accounts/branches : Get list of branches for operator accounts (運営・チーム)
     * # Get list of branches for operator accounts (運営・チーム) 
     *
     * @param pageNumber Page number (optional)
     * @param pageSize Number of items per page (optional)
     * @param clientAccountId クライアント (optional)
     * @param storeId 拠点・店舗 (optional)
     * @return Get list successfully (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "getOperatorBranches",
        summary = "Get list of branches for operator accounts (運営・チーム)",
        description = "# Get list of branches for operator accounts (運営・チーム) ",
        responses = {
            @ApiResponse(responseCode = "200", description = "Get list successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MDropdownListDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/dropdowns/operator-accounts/branches",
        produces = { "application/json" }
    )
    
    ResponseEntity<MDropdownListDto> getOperatorBranches(
        @Min(1) @Parameter(name = "pageNumber", description = "Page number", in = ParameterIn.QUERY) @Valid @RequestParam(value = "pageNumber", required = false) Integer pageNumber,
        @Min(1) @Parameter(name = "pageSize", description = "Number of items per page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "pageSize", required = false) Integer pageSize,
        @Parameter(name = "clientAccountId", description = "クライアント", in = ParameterIn.QUERY) @Valid @RequestParam(value = "clientAccountId", required = false) String clientAccountId,
        @Parameter(name = "storeId", description = "拠点・店舗", in = ParameterIn.QUERY) @Valid @RequestParam(value = "storeId", required = false) String storeId
    );


    /**
     * GET /dropdowns/operator-accounts/clients : Get list of client accounts for operator accounts (運営・クライアント)
     * # Get list of client accounts for operator accounts (運営・クライアント) 
     *
     * @param pageNumber Page number (optional)
     * @param pageSize Number of items per page (optional)
     * @param managerId 担当者 (optional)
     * @param branchId 支店 (optional)
     * @param storeId 拠点・店舗 (optional)
     * @return Get list successfully (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "getOperatorClients",
        summary = "Get list of client accounts for operator accounts (運営・クライアント)",
        description = "# Get list of client accounts for operator accounts (運営・クライアント) ",
        responses = {
            @ApiResponse(responseCode = "200", description = "Get list successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MDropdownListDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/dropdowns/operator-accounts/clients",
        produces = { "application/json" }
    )
    
    ResponseEntity<MDropdownListDto> getOperatorClients(
        @Min(1) @Parameter(name = "pageNumber", description = "Page number", in = ParameterIn.QUERY) @Valid @RequestParam(value = "pageNumber", required = false) Integer pageNumber,
        @Min(1) @Parameter(name = "pageSize", description = "Number of items per page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "pageSize", required = false) Integer pageSize,
        @Parameter(name = "managerId", description = "担当者", in = ParameterIn.QUERY) @Valid @RequestParam(value = "managerId", required = false) String managerId,
        @Parameter(name = "branchId", description = "支店", in = ParameterIn.QUERY) @Valid @RequestParam(value = "branchId", required = false) String branchId,
        @Parameter(name = "storeId", description = "拠点・店舗", in = ParameterIn.QUERY) @Valid @RequestParam(value = "storeId", required = false) String storeId
    );


    /**
     * GET /dropdowns/operator-accounts/managers : Get list of operator accounts for operator clients accounts (運営・担当者)
     * # Get list of operator accounts for operator clients accounts (運営・担当者) 
     *
     * @param pageNumber Page number (optional)
     * @param pageSize Number of items per page (optional)
     * @param teamId チーム (optional)
     * @return Get list successfully (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "getOperatorManagers",
        summary = "Get list of operator accounts for operator clients accounts (運営・担当者)",
        description = "# Get list of operator accounts for operator clients accounts (運営・担当者) ",
        responses = {
            @ApiResponse(responseCode = "200", description = "Get list successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MDropdownListDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/dropdowns/operator-accounts/managers",
        produces = { "application/json" }
    )
    
    ResponseEntity<MDropdownListDto> getOperatorManagers(
        @Min(1) @Parameter(name = "pageNumber", description = "Page number", in = ParameterIn.QUERY) @Valid @RequestParam(value = "pageNumber", required = false) Integer pageNumber,
        @Min(1) @Parameter(name = "pageSize", description = "Number of items per page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "pageSize", required = false) Integer pageSize,
        @Parameter(name = "teamId", description = "チーム", in = ParameterIn.QUERY) @Valid @RequestParam(value = "teamId", required = false) String teamId
    );


    /**
     * GET /dropdowns/operator-accounts/projects : Get list of projects for operator clients accounts (運営・案件)
     * # Get list of projects for operator clients accounts (運営・案件) 
     *
     * @param pageNumber Page number (optional)
     * @param pageSize Number of items per page (optional)
     * @param storeId 拠点・店舗 (optional)
     * @return Get list successfully (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "getOperatorProjects",
        summary = "Get list of projects for operator clients accounts (運営・案件)",
        description = "# Get list of projects for operator clients accounts (運営・案件) ",
        responses = {
            @ApiResponse(responseCode = "200", description = "Get list successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MDropdownListDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/dropdowns/operator-accounts/projects",
        produces = { "application/json" }
    )
    
    ResponseEntity<MDropdownListDto> getOperatorProjects(
        @Min(1) @Parameter(name = "pageNumber", description = "Page number", in = ParameterIn.QUERY) @Valid @RequestParam(value = "pageNumber", required = false) Integer pageNumber,
        @Min(1) @Parameter(name = "pageSize", description = "Number of items per page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "pageSize", required = false) Integer pageSize,
        @Parameter(name = "storeId", description = "拠点・店舗", in = ParameterIn.QUERY) @Valid @RequestParam(value = "storeId", required = false) String storeId
    );


    /**
     * GET /dropdowns/operator-accounts/staffs : Get list of staffs for operator accounts (運営・スタッフ)
     * # Get list of staffs for operator accounts (運営・スタッフ) 
     *
     * @param pageNumber Page number (optional)
     * @param pageSize Number of items per page (optional)
     * @return Get list successfully (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "getOperatorStaffs",
        summary = "Get list of staffs for operator accounts (運営・スタッフ)",
        description = "# Get list of staffs for operator accounts (運営・スタッフ) ",
        responses = {
            @ApiResponse(responseCode = "200", description = "Get list successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MDropdownListDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/dropdowns/operator-accounts/staffs",
        produces = { "application/json" }
    )
    
    ResponseEntity<MDropdownListDto> getOperatorStaffs(
        @Min(1) @Parameter(name = "pageNumber", description = "Page number", in = ParameterIn.QUERY) @Valid @RequestParam(value = "pageNumber", required = false) Integer pageNumber,
        @Min(1) @Parameter(name = "pageSize", description = "Number of items per page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "pageSize", required = false) Integer pageSize
    );


    /**
     * GET /dropdowns/operator-accounts/stores : Get list of stores for operator accounts (運営・拠点・店舗)
     * # Get list of stores for operator accounts (運営・拠点・店舗) 
     *
     * @param pageNumber Page number (optional)
     * @param pageSize Number of items per page (optional)
     * @param branchIds 支店 (optional)
     * @param clientAccountId クライアント (optional)
     * @param isAll すべての取得 (optional, default to 0)
     * @return Get list successfully (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "getOperatorStores",
        summary = "Get list of stores for operator accounts (運営・拠点・店舗)",
        description = "# Get list of stores for operator accounts (運営・拠点・店舗) ",
        responses = {
            @ApiResponse(responseCode = "200", description = "Get list successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MDropdownListDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/dropdowns/operator-accounts/stores",
        produces = { "application/json" }
    )
    
    ResponseEntity<MDropdownListDto> getOperatorStores(
        @Min(1) @Parameter(name = "pageNumber", description = "Page number", in = ParameterIn.QUERY) @Valid @RequestParam(value = "pageNumber", required = false) Integer pageNumber,
        @Min(1) @Parameter(name = "pageSize", description = "Number of items per page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "pageSize", required = false) Integer pageSize,
        @Parameter(name = "branchIds", description = "支店", in = ParameterIn.QUERY) @Valid @RequestParam(value = "branchIds", required = false) List<String> branchIds,
        @Parameter(name = "clientAccountId", description = "クライアント", in = ParameterIn.QUERY) @Valid @RequestParam(value = "clientAccountId", required = false) String clientAccountId,
        @Parameter(name = "isAll", description = "すべての取得", in = ParameterIn.QUERY) @Valid @RequestParam(value = "isAll", required = false, defaultValue = "0") Integer isAll
    );


    /**
     * GET /dropdowns/operator-accounts/teams : Get list of teams for operator accounts (運営・チーム)
     * # Get list of teams for operator accounts (運営・チーム) 
     *
     * @param pageNumber Page number (optional)
     * @param pageSize Number of items per page (optional)
     * @return Get list successfully (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "getOperatorTeams",
        summary = "Get list of teams for operator accounts (運営・チーム)",
        description = "# Get list of teams for operator accounts (運営・チーム) ",
        responses = {
            @ApiResponse(responseCode = "200", description = "Get list successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MDropdownListDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/dropdowns/operator-accounts/teams",
        produces = { "application/json" }
    )
    
    ResponseEntity<MDropdownListDto> getOperatorTeams(
        @Min(1) @Parameter(name = "pageNumber", description = "Page number", in = ParameterIn.QUERY) @Valid @RequestParam(value = "pageNumber", required = false) Integer pageNumber,
        @Min(1) @Parameter(name = "pageSize", description = "Number of items per page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "pageSize", required = false) Integer pageSize
    );

}
