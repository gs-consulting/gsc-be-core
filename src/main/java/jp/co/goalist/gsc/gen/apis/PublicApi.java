/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.10.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package jp.co.goalist.gsc.gen.apis;

import jp.co.goalist.gsc.gen.dtos.ErrorResponse;
import jp.co.goalist.gsc.gen.dtos.SurveyDetailsDto;
import jp.co.goalist.gsc.gen.dtos.SurveySubmissionDto;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Validated
@Tag(name = "public", description = "the public API")
@SuppressWarnings("unused")
public interface PublicApi {

    /**
     * GET /public/survey : Get questions and answers for public link (アンケートリンク)
     * # Get questions and answers for public link 
     *
     * @param token トークン (optional)
     * @return Get questions and answers successfully (status code 200)
     *         or Not found (status code 404)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "getQuestionsForPublicLink",
        summary = "Get questions and answers for public link (アンケートリンク)",
        description = "# Get questions and answers for public link ",
        responses = {
            @ApiResponse(responseCode = "200", description = "Get questions and answers successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SurveyDetailsDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/public/survey",
        produces = { "application/json" }
    )
    
    ResponseEntity<SurveyDetailsDto> getQuestionsForPublicLink(
        @Parameter(name = "token", description = "トークン", in = ParameterIn.QUERY) @Valid @RequestParam(value = "token", required = false) String token
    );


    /**
     * POST /public/survey-submission : Submit survey
     * # Submit survey 
     *
     * @param surveySubmissionDto  (required)
     * @return Submit successfully (status code 200)
     *         or Invalid input (status code 400)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "submitSurvey",
        summary = "Submit survey",
        description = "# Submit survey ",
        responses = {
            @ApiResponse(responseCode = "200", description = "Submit successfully"),
            @ApiResponse(responseCode = "400", description = "Invalid input", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/public/survey-submission",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> submitSurvey(
        @Parameter(name = "SurveySubmissionDto", description = "", required = true) @Valid @RequestBody SurveySubmissionDto surveySubmissionDto
    );

}
