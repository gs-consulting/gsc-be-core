/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.10.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package jp.co.goalist.gsc.gen.apis;

import jp.co.goalist.gsc.gen.dtos.ClientAccountDetailsDto;
import jp.co.goalist.gsc.gen.dtos.ClientAccountListDto;
import jp.co.goalist.gsc.gen.dtos.ClientAccountUpsertDto;
import jp.co.goalist.gsc.gen.dtos.ErrorResponse;
import jp.co.goalist.gsc.gen.dtos.OemAccountDetailsDto;
import jp.co.goalist.gsc.gen.dtos.OemAccountListDto;
import jp.co.goalist.gsc.gen.dtos.OemAccountUpsertDto;
import jp.co.goalist.gsc.gen.dtos.OemGroupItemsDto;
import jp.co.goalist.gsc.gen.dtos.OemUpsertDto;
import jp.co.goalist.gsc.gen.dtos.SelectedIds;
import jp.co.goalist.gsc.gen.dtos.StaffOemAccountDetailsDto;
import jp.co.goalist.gsc.gen.dtos.StaffOemAccountListDto;
import jp.co.goalist.gsc.gen.dtos.StaffOemAccountUpsertDto;
import jp.co.goalist.gsc.gen.dtos.StaffOperatorAccountDetailsDto;
import jp.co.goalist.gsc.gen.dtos.StaffOperatorAccountListDto;
import jp.co.goalist.gsc.gen.dtos.StaffOperatorAccountUpserDto;
import jp.co.goalist.gsc.gen.dtos.TeamDetailsDto;
import jp.co.goalist.gsc.gen.dtos.TeamListDto;
import jp.co.goalist.gsc.gen.dtos.TeamUpsertDto;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Validated
@Tag(name = "settings", description = "the settings API")
@SuppressWarnings("unused")
public interface SettingsApi {

    /**
     * POST /settings/client-accounts : Create a client account (クライアント)
     * # Create a client account (クライアント) 
     *
     * @param clientAccountUpsertDto  (required)
     * @return Create successfully (status code 201)
     *         or Invalid request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "createClientAccount",
        summary = "Create a client account (クライアント)",
        description = "# Create a client account (クライアント) ",
        responses = {
            @ApiResponse(responseCode = "201", description = "Create successfully"),
            @ApiResponse(responseCode = "400", description = "Invalid request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/settings/client-accounts",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> createClientAccount(
        @Parameter(name = "ClientAccountUpsertDto", description = "", required = true) @Valid @RequestBody ClientAccountUpsertDto clientAccountUpsertDto
    );


    /**
     * POST /settings/oem-groups : Create a new OEM group name
     * # Create a new OEM group 
     *
     * @param oemUpsertDto  (required)
     * @return Create successfully (status code 201)
     *         or Invalid request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "createNewOemGroup",
        summary = "Create a new OEM group name",
        description = "# Create a new OEM group ",
        responses = {
            @ApiResponse(responseCode = "201", description = "Create successfully"),
            @ApiResponse(responseCode = "400", description = "Invalid request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/settings/oem-groups",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> createNewOemGroup(
        @Parameter(name = "OemUpsertDto", description = "", required = true) @Valid @RequestBody OemUpsertDto oemUpsertDto
    );


    /**
     * POST /settings/clients/{id}/oem-accounts : Create a OEM account (OEMアカウント)
     * # Create a OEM account (OEMアカウント) 
     *
     * @param id ID of the resource (required)
     * @param oemAccountUpsertDto  (required)
     * @return Create successfully (status code 201)
     *         or Invalid request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "createOemAccount",
        summary = "Create a OEM account (OEMアカウント)",
        description = "# Create a OEM account (OEMアカウント) ",
        responses = {
            @ApiResponse(responseCode = "201", description = "Create successfully"),
            @ApiResponse(responseCode = "400", description = "Invalid request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/settings/clients/{id}/oem-accounts",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> createOemAccount(
        @Parameter(name = "id", description = "ID of the resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "OemAccountUpsertDto", description = "", required = true) @Valid @RequestBody OemAccountUpsertDto oemAccountUpsertDto
    );


    /**
     * POST /settings/staff/oem-accounts : Create a staff OEM account (スタッフ・OEM)
     * # Create a staff OEM account (スタッフ・OEM) 
     *
     * @param staffOemAccountUpsertDto  (required)
     * @return Create a new account for client (status code 201)
     *         or Invalid request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "createStaffOemAccount",
        summary = "Create a staff OEM account (スタッフ・OEM)",
        description = "# Create a staff OEM account (スタッフ・OEM) ",
        responses = {
            @ApiResponse(responseCode = "201", description = "Create a new account for client"),
            @ApiResponse(responseCode = "400", description = "Invalid request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/settings/staff/oem-accounts",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> createStaffOemAccount(
        @Parameter(name = "StaffOemAccountUpsertDto", description = "", required = true) @Valid @RequestBody StaffOemAccountUpsertDto staffOemAccountUpsertDto
    );


    /**
     * POST /settings/staff/operator-accounts : Create an operator account (スタッフ・運営)
     * # Create an operator account  (スタッフ・運営) 
     *
     * @param staffOperatorAccountUpserDto  (required)
     * @return Create successfully (status code 201)
     *         or Invalid request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "createStaffOperatorAccount",
        summary = "Create an operator account (スタッフ・運営)",
        description = "# Create an operator account  (スタッフ・運営) ",
        responses = {
            @ApiResponse(responseCode = "201", description = "Create successfully"),
            @ApiResponse(responseCode = "400", description = "Invalid request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/settings/staff/operator-accounts",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> createStaffOperatorAccount(
        @Parameter(name = "StaffOperatorAccountUpserDto", description = "", required = true) @Valid @RequestBody StaffOperatorAccountUpserDto staffOperatorAccountUpserDto
    );


    /**
     * POST /settings/teams : Create a new team
     * # Create a new team 
     *
     * @param teamUpsertDto  (required)
     * @return Created team successfully (status code 201)
     *         or Invalid input (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "createTeam",
        summary = "Create a new team",
        description = "# Create a new team ",
        responses = {
            @ApiResponse(responseCode = "201", description = "Created team successfully"),
            @ApiResponse(responseCode = "400", description = "Invalid input", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/settings/teams",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> createTeam(
        @Parameter(name = "TeamUpsertDto", description = "", required = true) @Valid @RequestBody TeamUpsertDto teamUpsertDto
    );


    /**
     * DELETE /settings/client-accounts : Delete client accounts
     * # Delete client accounts 
     *
     * @param selectedIds  (required)
     * @return Deleted successfully (status code 204)
     *         or Invalid input (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "deleteSelectedClientAccounts",
        summary = "Delete client accounts",
        description = "# Delete client accounts ",
        responses = {
            @ApiResponse(responseCode = "204", description = "Deleted successfully"),
            @ApiResponse(responseCode = "400", description = "Invalid input", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/settings/client-accounts",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> deleteSelectedClientAccounts(
        @Parameter(name = "SelectedIds", description = "", required = true) @Valid @RequestBody SelectedIds selectedIds
    );


    /**
     * DELETE /settings/staff/oem-accounts : Delete selected OEM staffs(スタッフ)
     *
     * @param selectedIds  (optional)
     * @return OK (status code 200)
     *         or Bad Validation (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "deleteSelectedOemStaffs",
        summary = "Delete selected OEM staffs(スタッフ)",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK"),
            @ApiResponse(responseCode = "400", description = "Bad Validation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/settings/staff/oem-accounts",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> deleteSelectedOemStaffs(
        @Parameter(name = "SelectedIds", description = "") @Valid @RequestBody(required = false) SelectedIds selectedIds
    );


    /**
     * DELETE /settings/staff/operator-accounts : Delete selected Operator staffs(スタッフ)
     *
     * @param selectedIds  (optional)
     * @return OK (status code 200)
     *         or Bad Validation (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "deleteSelectedOperatorStaffs",
        summary = "Delete selected Operator staffs(スタッフ)",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK"),
            @ApiResponse(responseCode = "400", description = "Bad Validation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/settings/staff/operator-accounts",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> deleteSelectedOperatorStaffs(
        @Parameter(name = "SelectedIds", description = "") @Valid @RequestBody(required = false) SelectedIds selectedIds
    );


    /**
     * DELETE /settings/teams : Delete selected Teams (チーム)
     *
     * @param selectedIds  (optional)
     * @return OK (status code 200)
     *         or Bad Validation (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "deleteSelectedTeams",
        summary = "Delete selected Teams (チーム)",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK"),
            @ApiResponse(responseCode = "400", description = "Bad Validation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/settings/teams",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> deleteSelectedTeams(
        @Parameter(name = "SelectedIds", description = "") @Valid @RequestBody(required = false) SelectedIds selectedIds
    );


    /**
     * PUT /settings/client-accounts/{accountId} : Edit a client account (クライアント)
     * # Edit a client account (クライアント) 
     *
     * @param accountId ID of the resource (required)
     * @param clientAccountUpsertDto  (required)
     * @return Update successfully (status code 200)
     *         or Invalid request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "editClientAccount",
        summary = "Edit a client account (クライアント)",
        description = "# Edit a client account (クライアント) ",
        responses = {
            @ApiResponse(responseCode = "200", description = "Update successfully"),
            @ApiResponse(responseCode = "400", description = "Invalid request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/settings/client-accounts/{accountId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> editClientAccount(
        @Parameter(name = "accountId", description = "ID of the resource", required = true, in = ParameterIn.PATH) @PathVariable("accountId") String accountId,
        @Parameter(name = "ClientAccountUpsertDto", description = "", required = true) @Valid @RequestBody ClientAccountUpsertDto clientAccountUpsertDto
    );


    /**
     * PUT /settings/oem-groups/{id} : Edit a OEM group name
     * # Edit OEM group name 
     *
     * @param id ID of the resource (required)
     * @param oemUpsertDto  (required)
     * @return Create successfully (status code 200)
     *         or Invalid request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "editNewOemGroup",
        summary = "Edit a OEM group name",
        description = "# Edit OEM group name ",
        responses = {
            @ApiResponse(responseCode = "200", description = "Create successfully"),
            @ApiResponse(responseCode = "400", description = "Invalid request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/settings/oem-groups/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> editNewOemGroup(
        @Parameter(name = "id", description = "ID of the resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "OemUpsertDto", description = "", required = true) @Valid @RequestBody OemUpsertDto oemUpsertDto
    );


    /**
     * PUT /settings/clients/{id}/oem-accounts/{accountId} : Edit OEM account details (OEMアカウント)
     * # Edit OEM account details (OEMアカウント) 
     *
     * @param id ID of the resource (required)
     * @param accountId ID of the resource (required)
     * @param oemAccountUpsertDto  (required)
     * @return Update successfully (status code 200)
     *         or Invalid input (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "editOemAccount",
        summary = "Edit OEM account details (OEMアカウント)",
        description = "# Edit OEM account details (OEMアカウント) ",
        responses = {
            @ApiResponse(responseCode = "200", description = "Update successfully"),
            @ApiResponse(responseCode = "400", description = "Invalid input", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/settings/clients/{id}/oem-accounts/{accountId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> editOemAccount(
        @Parameter(name = "id", description = "ID of the resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "accountId", description = "ID of the resource", required = true, in = ParameterIn.PATH) @PathVariable("accountId") String accountId,
        @Parameter(name = "OemAccountUpsertDto", description = "", required = true) @Valid @RequestBody OemAccountUpsertDto oemAccountUpsertDto
    );


    /**
     * PUT /settings/staff/oem-accounts/{accountId} : Edit staff oem account details (スタッフ・OEM)
     * # Edit staff account oem details (スタッフ・OEM) 
     *
     * @param accountId ID of the resource (required)
     * @param staffOemAccountUpsertDto  (required)
     * @return Update successfully (status code 200)
     *         or Invalid input (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "editStaffOemAccount",
        summary = "Edit staff oem account details (スタッフ・OEM)",
        description = "# Edit staff account oem details (スタッフ・OEM) ",
        responses = {
            @ApiResponse(responseCode = "200", description = "Update successfully"),
            @ApiResponse(responseCode = "400", description = "Invalid input", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/settings/staff/oem-accounts/{accountId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> editStaffOemAccount(
        @Parameter(name = "accountId", description = "ID of the resource", required = true, in = ParameterIn.PATH) @PathVariable("accountId") String accountId,
        @Parameter(name = "StaffOemAccountUpsertDto", description = "", required = true) @Valid @RequestBody StaffOemAccountUpsertDto staffOemAccountUpsertDto
    );


    /**
     * PUT /settings/staff/operator-accounts/{accountId} : Edit operator account (スタッフ・運営)
     * # Edit operator acount (スタッフ・運営) 
     *
     * @param accountId ID of the resource (required)
     * @param staffOperatorAccountUpserDto  (required)
     * @return Edit successfully (status code 200)
     *         or Invalid request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "editStaffOperatorAccount",
        summary = "Edit operator account (スタッフ・運営)",
        description = "# Edit operator acount (スタッフ・運営) ",
        responses = {
            @ApiResponse(responseCode = "200", description = "Edit successfully"),
            @ApiResponse(responseCode = "400", description = "Invalid request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/settings/staff/operator-accounts/{accountId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> editStaffOperatorAccount(
        @Parameter(name = "accountId", description = "ID of the resource", required = true, in = ParameterIn.PATH) @PathVariable("accountId") String accountId,
        @Parameter(name = "StaffOperatorAccountUpserDto", description = "", required = true) @Valid @RequestBody StaffOperatorAccountUpserDto staffOperatorAccountUpserDto
    );


    /**
     * PUT /settings/teams/{id} : Edit team details (チーム)
     * # Edit team details (チーム) 
     *
     * @param id ID of the resource (required)
     * @param teamUpsertDto  (required)
     * @return Update team details (status code 200)
     *         or Invalid input (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Resource not found (status code 404)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "editTeam",
        summary = "Edit team details (チーム)",
        description = "# Edit team details (チーム) ",
        responses = {
            @ApiResponse(responseCode = "200", description = "Update team details"),
            @ApiResponse(responseCode = "400", description = "Invalid input", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Resource not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/settings/teams/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> editTeam(
        @Parameter(name = "id", description = "ID of the resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "TeamUpsertDto", description = "", required = true) @Valid @RequestBody TeamUpsertDto teamUpsertDto
    );


    /**
     * GET /settings/client-accounts/{accountId} : Get client account details (クライアント)
     * # Get client account details (クライアント) 
     *
     * @param accountId ID of the resource (required)
     * @return Get successfully (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "getClientAccountDetails",
        summary = "Get client account details (クライアント)",
        description = "# Get client account details (クライアント) ",
        responses = {
            @ApiResponse(responseCode = "200", description = "Get successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ClientAccountDetailsDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/settings/client-accounts/{accountId}",
        produces = { "application/json" }
    )
    
    ResponseEntity<ClientAccountDetailsDto> getClientAccountDetails(
        @Parameter(name = "accountId", description = "ID of the resource", required = true, in = ParameterIn.PATH) @PathVariable("accountId") String accountId
    );


    /**
     * GET /settings/client-accounts : Get all client accounts (クライアント)
     * # Get all client accounts (クライアント) 
     *
     * @param pageNumber Page number (optional)
     * @param pageSize Number of items per page (optional)
     * @param searchInput search input for get list api (optional)
     * @return Get list successfully (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "getClientAccounts",
        summary = "Get all client accounts (クライアント)",
        description = "# Get all client accounts (クライアント) ",
        responses = {
            @ApiResponse(responseCode = "200", description = "Get list successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ClientAccountListDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/settings/client-accounts",
        produces = { "application/json" }
    )
    
    ResponseEntity<ClientAccountListDto> getClientAccounts(
        @Min(1) @Parameter(name = "pageNumber", description = "Page number", in = ParameterIn.QUERY) @Valid @RequestParam(value = "pageNumber", required = false) Integer pageNumber,
        @Min(1) @Parameter(name = "pageSize", description = "Number of items per page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "pageSize", required = false) Integer pageSize,
        @Parameter(name = "searchInput", description = "search input for get list api", in = ParameterIn.QUERY) @Valid @RequestParam(value = "searchInput", required = false) String searchInput
    );


    /**
     * GET /settings/clients/{id}/oem-accounts/{accountId} : Get OEM account details (OEMアカウント)
     * # Get OEM account details (OEMアカウント) 
     *
     * @param id ID of the resource (required)
     * @param accountId ID of the resource (required)
     * @return Get successfully (status code 200)
     *         or Invalid input (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not found (status code 404)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "getOemAccountDetails",
        summary = "Get OEM account details (OEMアカウント)",
        description = "# Get OEM account details (OEMアカウント) ",
        responses = {
            @ApiResponse(responseCode = "200", description = "Get successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = OemAccountDetailsDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid input", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/settings/clients/{id}/oem-accounts/{accountId}",
        produces = { "application/json" }
    )
    
    ResponseEntity<OemAccountDetailsDto> getOemAccountDetails(
        @Parameter(name = "id", description = "ID of the resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "accountId", description = "ID of the resource", required = true, in = ParameterIn.PATH) @PathVariable("accountId") String accountId
    );


    /**
     * GET /settings/clients/{id}/oem-accounts : Get list of OEM accounts (OEMアカウント)
     * # Get list of OEM accounts (OEMアカウント) 
     *
     * @param id ID of the resource (required)
     * @param pageNumber Page number (optional)
     * @param pageSize Number of items per page (optional)
     * @param searchInput search input for get list api (optional)
     * @return Get list successfully (status code 200)
     *         or Invalid request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "getOemAccounts",
        summary = "Get list of OEM accounts (OEMアカウント)",
        description = "# Get list of OEM accounts (OEMアカウント) ",
        responses = {
            @ApiResponse(responseCode = "200", description = "Get list successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = OemAccountListDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/settings/clients/{id}/oem-accounts",
        produces = { "application/json" }
    )
    
    ResponseEntity<OemAccountListDto> getOemAccounts(
        @Parameter(name = "id", description = "ID of the resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Min(1) @Parameter(name = "pageNumber", description = "Page number", in = ParameterIn.QUERY) @Valid @RequestParam(value = "pageNumber", required = false) Integer pageNumber,
        @Min(1) @Parameter(name = "pageSize", description = "Number of items per page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "pageSize", required = false) Integer pageSize,
        @Parameter(name = "searchInput", description = "search input for get list api", in = ParameterIn.QUERY) @Valid @RequestParam(value = "searchInput", required = false) String searchInput
    );


    /**
     * GET /settings/oem-groups : get list of all OEM groups
     * # Get all OEM groups 
     *
     * @param isClientEdit ジーエス様を含めて返す (optional, default to false)
     * @return Get list successfully (status code 200)
     *         or Invalid request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "getOemGroups",
        summary = "get list of all OEM groups",
        description = "# Get all OEM groups ",
        responses = {
            @ApiResponse(responseCode = "200", description = "Get list successfully", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = OemGroupItemsDto.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/settings/oem-groups",
        produces = { "application/json" }
    )
    
    ResponseEntity<List<OemGroupItemsDto>> getOemGroups(
        @Parameter(name = "isClientEdit", description = "ジーエス様を含めて返す", in = ParameterIn.QUERY) @Valid @RequestParam(value = "isClientEdit", required = false, defaultValue = "false") Boolean isClientEdit
    );


    /**
     * GET /settings/staff/oem-accounts/{accountId} : Get staff account details (スタッフ・OEM)
     * # Get staff account details 
     *
     * @param accountId ID of the resource (required)
     * @return Get successfully (status code 200)
     *         or Invalid input (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not found (status code 404)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "getStaffOemAccountDetails",
        summary = "Get staff account details (スタッフ・OEM)",
        description = "# Get staff account details ",
        responses = {
            @ApiResponse(responseCode = "200", description = "Get successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = StaffOemAccountDetailsDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid input", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/settings/staff/oem-accounts/{accountId}",
        produces = { "application/json" }
    )
    
    ResponseEntity<StaffOemAccountDetailsDto> getStaffOemAccountDetails(
        @Parameter(name = "accountId", description = "ID of the resource", required = true, in = ParameterIn.PATH) @PathVariable("accountId") String accountId
    );


    /**
     * GET /settings/staff/oem-accounts : Get list of Staff accounts (スタッフ・OEM)
     * # Get list of Staff accounts (スタッフ・OEM) 
     *
     * @param pageNumber Page number (optional)
     * @param pageSize Number of items per page (optional)
     * @param searchInput search input for get list api (optional)
     * @return Get list successfully (status code 200)
     *         or Invalid request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "getStaffOemAccounts",
        summary = "Get list of Staff accounts (スタッフ・OEM)",
        description = "# Get list of Staff accounts (スタッフ・OEM) ",
        responses = {
            @ApiResponse(responseCode = "200", description = "Get list successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = StaffOemAccountListDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/settings/staff/oem-accounts",
        produces = { "application/json" }
    )
    
    ResponseEntity<StaffOemAccountListDto> getStaffOemAccounts(
        @Min(1) @Parameter(name = "pageNumber", description = "Page number", in = ParameterIn.QUERY) @Valid @RequestParam(value = "pageNumber", required = false) Integer pageNumber,
        @Min(1) @Parameter(name = "pageSize", description = "Number of items per page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "pageSize", required = false) Integer pageSize,
        @Parameter(name = "searchInput", description = "search input for get list api", in = ParameterIn.QUERY) @Valid @RequestParam(value = "searchInput", required = false) String searchInput
    );


    /**
     * GET /settings/staff/operator-accounts/{accountId} : get operator account (スタッフ・運営)
     * # Get operator account (スタッフ・運営) 
     *
     * @param accountId ID of the resource (required)
     * @return Get details of an OEM account (status code 200)
     *         or Invalid request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Unauthorized (status code 404)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "getStaffOperatorAccountDetails",
        summary = "get operator account (スタッフ・運営)",
        description = "# Get operator account (スタッフ・運営) ",
        responses = {
            @ApiResponse(responseCode = "200", description = "Get details of an OEM account", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = StaffOperatorAccountDetailsDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/settings/staff/operator-accounts/{accountId}",
        produces = { "application/json" }
    )
    
    ResponseEntity<StaffOperatorAccountDetailsDto> getStaffOperatorAccountDetails(
        @Parameter(name = "accountId", description = "ID of the resource", required = true, in = ParameterIn.PATH) @PathVariable("accountId") String accountId
    );


    /**
     * GET /settings/staff/operator-accounts : get list of operator accounts  (スタッフ・運営)
     * # Get list of operator accounts  (スタッフ・運営) 
     *
     * @param pageNumber Page number (optional)
     * @param pageSize Number of items per page (optional)
     * @param searchInput search input for get list api (optional)
     * @return Get list successfully (status code 200)
     *         or Invalid request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "getStaffOperatorAccounts",
        summary = "get list of operator accounts  (スタッフ・運営)",
        description = "# Get list of operator accounts  (スタッフ・運営) ",
        responses = {
            @ApiResponse(responseCode = "200", description = "Get list successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = StaffOperatorAccountListDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/settings/staff/operator-accounts",
        produces = { "application/json" }
    )
    
    ResponseEntity<StaffOperatorAccountListDto> getStaffOperatorAccounts(
        @Min(1) @Parameter(name = "pageNumber", description = "Page number", in = ParameterIn.QUERY) @Valid @RequestParam(value = "pageNumber", required = false) Integer pageNumber,
        @Min(1) @Parameter(name = "pageSize", description = "Number of items per page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "pageSize", required = false) Integer pageSize,
        @Parameter(name = "searchInput", description = "search input for get list api", in = ParameterIn.QUERY) @Valid @RequestParam(value = "searchInput", required = false) String searchInput
    );


    /**
     * GET /settings/teams/{id} : Get team details (チーム)
     * # Get team details (チーム) 
     *
     * @param id ID of the resource (required)
     * @return Get team details (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Resource not found (status code 404)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "getTeamDetails",
        summary = "Get team details (チーム)",
        description = "# Get team details (チーム) ",
        responses = {
            @ApiResponse(responseCode = "200", description = "Get team details", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TeamDetailsDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Resource not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/settings/teams/{id}",
        produces = { "application/json" }
    )
    
    ResponseEntity<TeamDetailsDto> getTeamDetails(
        @Parameter(name = "id", description = "ID of the resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    );


    /**
     * GET /settings/teams : Get team list (チーム)
     * # Get team list 
     *
     * @param pageNumber Page number (optional)
     * @param pageSize Number of items per page (optional)
     * @param searchInput search input for get list api (optional)
     * @return Get team list (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "getTeams",
        summary = "Get team list (チーム)",
        description = "# Get team list ",
        responses = {
            @ApiResponse(responseCode = "200", description = "Get team list", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TeamListDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/settings/teams",
        produces = { "application/json" }
    )
    
    ResponseEntity<TeamListDto> getTeams(
        @Min(1) @Parameter(name = "pageNumber", description = "Page number", in = ParameterIn.QUERY) @Valid @RequestParam(value = "pageNumber", required = false) Integer pageNumber,
        @Min(1) @Parameter(name = "pageSize", description = "Number of items per page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "pageSize", required = false) Integer pageSize,
        @Parameter(name = "searchInput", description = "search input for get list api", in = ParameterIn.QUERY) @Valid @RequestParam(value = "searchInput", required = false) String searchInput
    );

}
