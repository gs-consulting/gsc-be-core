/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.10.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package jp.co.goalist.gsc.gen.apis;

import jp.co.goalist.gsc.gen.dtos.ErrorResponse;
import jp.co.goalist.gsc.gen.dtos.LoginFormDto;
import jp.co.goalist.gsc.gen.dtos.LoginInfoDto;
import jp.co.goalist.gsc.gen.dtos.ResetPasswordFormDto;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Validated
@Tag(name = "auth", description = "the auth API")
@SuppressWarnings("unused")
public interface AuthApi {

    /**
     * POST /auth/login : Login API
     * # Login API 
     *
     * @param loginFormDto  (optional)
     * @return User exists and password is correct (status code 201)
     *         or Bad request (status code 400)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "login",
        summary = "Login API",
        description = "# Login API ",
        responses = {
            @ApiResponse(responseCode = "201", description = "User exists and password is correct", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = LoginInfoDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/auth/login",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<LoginInfoDto> login(
        @Parameter(name = "LoginFormDto", description = "") @Valid @RequestBody(required = false) LoginFormDto loginFormDto
    );


    /**
     * POST /auth/reset-password : Reset password when user forgot password
     *
     * @param resetPasswordFormDto  (optional)
     * @return Reset password successfully (status code 200)
     *         or Invalid input (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "resetPassword",
        summary = "Reset password when user forgot password",
        responses = {
            @ApiResponse(responseCode = "200", description = "Reset password successfully"),
            @ApiResponse(responseCode = "400", description = "Invalid input", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/auth/reset-password",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> resetPassword(
        @Parameter(name = "ResetPasswordFormDto", description = "") @Valid @RequestBody(required = false) ResetPasswordFormDto resetPasswordFormDto
    );

}
