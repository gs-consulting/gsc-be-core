/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.10.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package jp.co.goalist.gsc.gen.apis;

import jp.co.goalist.gsc.gen.dtos.ErrorResponse;
import jp.co.goalist.gsc.gen.dtos.MediaReportAfterJoinDto;
import jp.co.goalist.gsc.gen.dtos.MediaReportBeforeJoinDto;
import jp.co.goalist.gsc.gen.dtos.MediaReportSearchBoxDto;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Validated
@Tag(name = "advertisement-reports", description = "the advertisement-reports API")
@SuppressWarnings("unused")
public interface AdvertisementReportsApi {

    /**
     * POST /advertisement-reports/media-cost-after-join : Get media cost after join report (媒体費レポート)
     * # Get media cost report - first table and charts 
     *
     * @param mediaReportSearchBoxDto  (optional)
     * @return Get list successfully (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "getMediaCostAfterJoin",
        summary = "Get media cost after join report (媒体費レポート)",
        description = "# Get media cost report - first table and charts ",
        responses = {
            @ApiResponse(responseCode = "200", description = "Get list successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MediaReportAfterJoinDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/advertisement-reports/media-cost-after-join",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<MediaReportAfterJoinDto> getMediaCostAfterJoin(
        @Parameter(name = "MediaReportSearchBoxDto", description = "") @Valid @RequestBody(required = false) MediaReportSearchBoxDto mediaReportSearchBoxDto
    );


    /**
     * POST /advertisement-reports/media-cost-before-join : Get media cost before join report (媒体費レポート)
     * # Get media cost report - first table and charts 
     *
     * @param mediaReportSearchBoxDto  (optional)
     * @return Get list successfully (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "getMediaCostBeforeJoin",
        summary = "Get media cost before join report (媒体費レポート)",
        description = "# Get media cost report - first table and charts ",
        responses = {
            @ApiResponse(responseCode = "200", description = "Get list successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MediaReportBeforeJoinDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/advertisement-reports/media-cost-before-join",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<MediaReportBeforeJoinDto> getMediaCostBeforeJoin(
        @Parameter(name = "MediaReportSearchBoxDto", description = "") @Valid @RequestBody(required = false) MediaReportSearchBoxDto mediaReportSearchBoxDto
    );

}
