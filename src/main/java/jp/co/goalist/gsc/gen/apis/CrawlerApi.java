/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.10.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package jp.co.goalist.gsc.gen.apis;

import jp.co.goalist.gsc.gen.dtos.CrawlerMediasDto;
import jp.co.goalist.gsc.gen.dtos.ErrorResponse;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Validated
@Tag(name = "crawler", description = "the crawler API")
@SuppressWarnings("unused")
public interface CrawlerApi {

    /**
     * GET /crawler/medias : クローラーメディアデータ取得
     * クローラーに必要なメディアデータを取得するAPI
     *
     * @param mediaId Media ID (required)
     * @return OK (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "getCrawlerMedias",
        summary = "クローラーメディアデータ取得",
        description = "クローラーに必要なメディアデータを取得するAPI",
        tags = { "crawler" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CrawlerMediasDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "apiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/crawler/medias",
        produces = { "application/json" }
    )
    
    ResponseEntity<CrawlerMediasDto> getCrawlerMedias(
        @NotNull @Parameter(name = "mediaId", description = "Media ID", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "mediaId", required = true) String mediaId
    );


    /**
     * POST /crawler/import-media-csv : MediaCsv インポート
     * クローラーで取得されたメディアの応募者情報をImportするAPI
     *
     * @param mediaId Media ID (required)
     * @param multipartFile CSV file to import (required)
     * @return OK (status code 202)
     *         or Bad Validation (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "importMediaCsv",
        summary = "MediaCsv インポート",
        description = "クローラーで取得されたメディアの応募者情報をImportするAPI",
        tags = { "crawler" },
        responses = {
            @ApiResponse(responseCode = "202", description = "OK"),
            @ApiResponse(responseCode = "400", description = "Bad Validation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "apiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/crawler/import-media-csv",
        produces = { "application/json" },
        consumes = { "multipart/form-data" }
    )
    
    ResponseEntity<Void> importMediaCsv(
        @Parameter(name = "mediaId", description = "Media ID", required = true) @Valid @RequestParam(value = "mediaId", required = true) String mediaId,
        @Parameter(name = "multipartFile", description = "CSV file to import", required = true) @RequestPart(value = "multipartFile", required = true) MultipartFile multipartFile
    );

}
