/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.10.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package jp.co.goalist.gsc.gen.apis;

import jp.co.goalist.gsc.gen.dtos.BlacklistCreateDto;
import jp.co.goalist.gsc.gen.dtos.BlacklistListDto;
import jp.co.goalist.gsc.gen.dtos.BlacklistMemoDto;
import jp.co.goalist.gsc.gen.dtos.BlacklistSearchDto;
import jp.co.goalist.gsc.gen.dtos.ErrorResponse;
import jp.co.goalist.gsc.gen.dtos.SelectedIds;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Validated
@Tag(name = "blacklists", description = "the blacklists API")
@SuppressWarnings("unused")
public interface BlacklistsApi {

    /**
     * POST /blacklists : Create a new blacklist (選考対象外一覧)
     * # Create a new blacklist 
     *
     * @param blacklistCreateDto  (required)
     * @return Created successfully (status code 201)
     *         or Invalid input (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "createNewBlacklist",
        summary = "Create a new blacklist (選考対象外一覧)",
        description = "# Create a new blacklist ",
        responses = {
            @ApiResponse(responseCode = "201", description = "Created successfully"),
            @ApiResponse(responseCode = "400", description = "Invalid input", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/blacklists",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> createNewBlacklist(
        @Parameter(name = "BlacklistCreateDto", description = "", required = true) @Valid @RequestBody BlacklistCreateDto blacklistCreateDto
    );


    /**
     * DELETE /blacklists : Delete selected blacklist (選考対象外一覧)
     *
     * @param selectedIds  (optional)
     * @return OK (status code 200)
     *         or Bad Validation (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "deleteSelectedBlacklists",
        summary = "Delete selected blacklist (選考対象外一覧)",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK"),
            @ApiResponse(responseCode = "400", description = "Bad Validation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/blacklists",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> deleteSelectedBlacklists(
        @Parameter(name = "SelectedIds", description = "") @Valid @RequestBody(required = false) SelectedIds selectedIds
    );


    /**
     * PUT /blacklists/{id}/memo : Edit a blacklist memo (選考対象外)
     * # Edit a blacklist memo 
     *
     * @param id ID of the resource (required)
     * @param blacklistMemoDto  (optional)
     * @return Save successfully (status code 200)
     *         or Bad Validation (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Unauthorized (status code 404)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "editBlacklistMemo",
        summary = "Edit a blacklist memo (選考対象外)",
        description = "# Edit a blacklist memo ",
        responses = {
            @ApiResponse(responseCode = "200", description = "Save successfully"),
            @ApiResponse(responseCode = "400", description = "Bad Validation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/blacklists/{id}/memo",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> editBlacklistMemo(
        @Parameter(name = "id", description = "ID of the resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "BlacklistMemoDto", description = "") @Valid @RequestBody(required = false) BlacklistMemoDto blacklistMemoDto
    );


    /**
     * POST /blacklists/list : Get list of blacklists (選考対象外一覧)
     * # Get list of blacklists 
     *
     * @param blacklistSearchDto  (optional)
     * @return Get list successfully (status code 200)
     *         or Invalid input (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "getBlacklists",
        summary = "Get list of blacklists (選考対象外一覧)",
        description = "# Get list of blacklists ",
        responses = {
            @ApiResponse(responseCode = "200", description = "Get list successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BlacklistListDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid input", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/blacklists/list",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<BlacklistListDto> getBlacklists(
        @Parameter(name = "BlacklistSearchDto", description = "") @Valid @RequestBody(required = false) BlacklistSearchDto blacklistSearchDto
    );

}
