/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.10.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package jp.co.goalist.gsc.gen.apis;

import jp.co.goalist.gsc.gen.dtos.ErrorResponse;
import jp.co.goalist.gsc.gen.dtos.ExternalApplicantCreateDto;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Validated
@Tag(name = "webhook", description = "the webhook API")
@SuppressWarnings("unused")
public interface WebhookApi {

    /**
     * POST /webhook/applicants : Create a new applicant via webhook (応募者)
     * # Webhook経由で新しい応募者を作成 ## 概要 リクエストヘッダーの &#x60;Authorization&#x60; に GS-C によって提供された &#x60;token&#x60; を設定してください。&lt;br&gt; リクエストボディがバリデーションを通過しない場合、400レスポンスとエラーメッセージが返されます。&lt;br&gt; トークンが提供されない、または無効な場合、401レスポンスが返されます。&lt;br&gt; システムエラーが発生した場合、500レスポンスが返されます。&lt;br&gt;  ## Request Body 外部応募者情報の作成リクエスト。  例: POST /webhook/applicants &#x60;&#x60;&#x60;json {     \&quot;userId\&quot;: \&quot;xxxxxxxxxx\&quot;,     \&quot;mediaName\&quot;: \&quot;応募経路\&quot;,     \&quot;manuscriptUrl\&quot;: \&quot;https://example.com/job\&quot;,     \&quot;occupation\&quot;: \&quot;応募職種\&quot;,     \&quot;fullName\&quot;: \&quot;お名前\&quot;,     \&quot;furiganaName\&quot;: \&quot;フリガナ\&quot;,     \&quot;gender\&quot;: \&quot;男性\&quot;,     \&quot;birthday\&quot;: \&quot;1990-01-01\&quot;,     \&quot;homeAddress\&quot;: \&quot;ご住所\&quot;,     \&quot;email\&quot;: \&quot;email@domain.com\&quot;,     \&quot;tel\&quot;: \&quot;09012345678\&quot;,     \&quot;memo\&quot;: \&quot;備考\&quot;,     \&quot;applicationDate\&quot;: \&quot;2025-07-11 10:00:00\&quot;,     \&quot;postCode\&quot;: \&quot;1000001\&quot;,     \&quot;prefecture\&quot;: \&quot;13\&quot;,     \&quot;city\&quot;: \&quot;千代田区\&quot;,     \&quot;kyujinApplicantId\&quot;: \&quot;APP-12345\&quot;,     \&quot;kyujinJobId\&quot;: \&quot;JOB-67890\&quot;,     \&quot;kyujin_occupation_name\&quot;: \&quot;Software Engineer\&quot; } &#x60;&#x60;&#x60;  ## パラメーター一覧  | フィールド名 | 必須 | CSVデータ項目名 | メモ | | :--- | :---: | :--- | :--- | | userId | X | | 求人部．テーブルにある「user_id」。&lt;br&gt;検索要件：求人部連携の「ユーザーID」を一致する | | mediaName | X | 応募経路 | テキスト | | manuscriptUrl | | 求人URL | テキスト | | occupation | | 応募職種 | 以下の固定値: **学生**, **フリーター**, **会社員**, **留学生**, **自営業**, **主婦・主夫**, **その他**。&lt;br&gt;いずれかの値に一致しない場合、**その他**として扱われます。 | | fullName | X | お名前 | テキスト | | furiganaName | | フリガナ | テキスト | | gender | | 性別 | 固定値: **男性**, **女性**。&lt;br&gt;いずれかの値に一致しない場合、空として扱われます。 | | birthday | | 生年月日 | &#x60;yyyy-MM-dd hh:mm:ss&#x60; | | postCode | | | テキスト。できれば送る | | prefecture | | | テキスト。できれば送る | | city | | | テキスト。できれば送る | | homeAddress | | ご住所 | 住所全体。分割可能な場合、&#x60;postCode&#x60;、&#x60;prefecture&#x60;、&#x60;city&#x60;がこれから入力されます。 | | email | | メールアドレス | 有効なメールアドレス形式である必要があります（例: &#x60;user@example.com&#x60;）。&lt;br&gt;ローカルパート（&#x60;@&#x60;の前）には、小文字の英字、数字、および記号（&#x60;.&#x60; &#x60;_&#x60; &#x60;%&#x60; &#x60;+&#x60; &#x60;-&#x60;）を使用できます。&lt;br&gt;ドメイン（&#x60;@&#x60;の後）には、小文字の英字、数字、ハイフン、ドットを使用でき、&lt;br&gt;トップレベルドメイン（&#x60;.com&#x60;など）は2文字以上である必要があります。 | | tel | | 電話番号 | 数字、&#x60;+&#x60;、&#x60;()&#x60;、&#x60;-&#x60;、スペース、のみ使用可能で、長さは1～30文字です。 | | memo | | 備考 | テキスト | | applicationDate | | 応募受付日時 | &#x60;yyyy-MM-dd hh:mm:ss&#x60; | | kyujinApplicantId | X | | 求人部．テーブルにある「applicant_id」 | | kyujinJobId | | | 求人部．テーブルにある「job_id」 | 
     *
     * @param externalApplicantCreateDto  (required)
     * @return Created successfully (status code 201)
     *         or Invalid input (status code 400)
     *         or Unauthorized (status code 401)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "createNewApplicantWebhook",
        summary = "Create a new applicant via webhook (応募者)",
        description = "# Webhook経由で新しい応募者を作成 ## 概要 リクエストヘッダーの `Authorization` に GS-C によって提供された `token` を設定してください。<br> リクエストボディがバリデーションを通過しない場合、400レスポンスとエラーメッセージが返されます。<br> トークンが提供されない、または無効な場合、401レスポンスが返されます。<br> システムエラーが発生した場合、500レスポンスが返されます。<br>  ## Request Body 外部応募者情報の作成リクエスト。  例: POST /webhook/applicants ```json {     \"userId\": \"xxxxxxxxxx\",     \"mediaName\": \"応募経路\",     \"manuscriptUrl\": \"https://example.com/job\",     \"occupation\": \"応募職種\",     \"fullName\": \"お名前\",     \"furiganaName\": \"フリガナ\",     \"gender\": \"男性\",     \"birthday\": \"1990-01-01\",     \"homeAddress\": \"ご住所\",     \"email\": \"email@domain.com\",     \"tel\": \"09012345678\",     \"memo\": \"備考\",     \"applicationDate\": \"2025-07-11 10:00:00\",     \"postCode\": \"1000001\",     \"prefecture\": \"13\",     \"city\": \"千代田区\",     \"kyujinApplicantId\": \"APP-12345\",     \"kyujinJobId\": \"JOB-67890\",     \"kyujin_occupation_name\": \"Software Engineer\" } ```  ## パラメーター一覧  | フィールド名 | 必須 | CSVデータ項目名 | メモ | | :--- | :---: | :--- | :--- | | userId | X | | 求人部．テーブルにある「user_id」。<br>検索要件：求人部連携の「ユーザーID」を一致する | | mediaName | X | 応募経路 | テキスト | | manuscriptUrl | | 求人URL | テキスト | | occupation | | 応募職種 | 以下の固定値: **学生**, **フリーター**, **会社員**, **留学生**, **自営業**, **主婦・主夫**, **その他**。<br>いずれかの値に一致しない場合、**その他**として扱われます。 | | fullName | X | お名前 | テキスト | | furiganaName | | フリガナ | テキスト | | gender | | 性別 | 固定値: **男性**, **女性**。<br>いずれかの値に一致しない場合、空として扱われます。 | | birthday | | 生年月日 | `yyyy-MM-dd hh:mm:ss` | | postCode | | | テキスト。できれば送る | | prefecture | | | テキスト。できれば送る | | city | | | テキスト。できれば送る | | homeAddress | | ご住所 | 住所全体。分割可能な場合、`postCode`、`prefecture`、`city`がこれから入力されます。 | | email | | メールアドレス | 有効なメールアドレス形式である必要があります（例: `user@example.com`）。<br>ローカルパート（`@`の前）には、小文字の英字、数字、および記号（`.` `_` `%` `+` `-`）を使用できます。<br>ドメイン（`@`の後）には、小文字の英字、数字、ハイフン、ドットを使用でき、<br>トップレベルドメイン（`.com`など）は2文字以上である必要があります。 | | tel | | 電話番号 | 数字、`+`、`()`、`-`、スペース、のみ使用可能で、長さは1～30文字です。 | | memo | | 備考 | テキスト | | applicationDate | | 応募受付日時 | `yyyy-MM-dd hh:mm:ss` | | kyujinApplicantId | X | | 求人部．テーブルにある「applicant_id」 | | kyujinJobId | | | 求人部．テーブルにある「job_id」 | ",
        responses = {
            @ApiResponse(responseCode = "201", description = "Created successfully"),
            @ApiResponse(responseCode = "400", description = "Invalid input", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/webhook/applicants",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> createNewApplicantWebhook(
        @Parameter(name = "ExternalApplicantCreateDto", description = "", required = true) @Valid @RequestBody ExternalApplicantCreateDto externalApplicantCreateDto
    );

}
