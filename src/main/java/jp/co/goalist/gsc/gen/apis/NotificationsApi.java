/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.10.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package jp.co.goalist.gsc.gen.apis;

import jp.co.goalist.gsc.gen.dtos.ErrorResponse;
import jp.co.goalist.gsc.gen.dtos.NotificationDetailsDto;
import jp.co.goalist.gsc.gen.dtos.NotificationListDto;
import jp.co.goalist.gsc.gen.dtos.NotificationUpsertDto;
import jp.co.goalist.gsc.gen.dtos.SelectedIds;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Validated
@Tag(name = "notifications", description = "the notifications API")
@SuppressWarnings("unused")
public interface NotificationsApi {

    /**
     * POST /notifications : Create a notification (お知らせ設定)
     * # Create new notification 
     *
     * @param notificationUpsertDto  (optional)
     * @return Saved successfully (status code 201)
     *         or Bad Validation (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Unauthorized (status code 404)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "createNewNotification",
        summary = "Create a notification (お知らせ設定)",
        description = "# Create new notification ",
        responses = {
            @ApiResponse(responseCode = "201", description = "Saved successfully"),
            @ApiResponse(responseCode = "400", description = "Bad Validation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/notifications",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> createNewNotification(
        @Parameter(name = "NotificationUpsertDto", description = "") @Valid @RequestBody(required = false) NotificationUpsertDto notificationUpsertDto
    );


    /**
     * DELETE /notifications : Delete selected notifications (お知らせ設定)
     *
     * @param selectedIds  (optional)
     * @return OK (status code 200)
     *         or Bad Validation (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "deleteSelectedNotifications",
        summary = "Delete selected notifications (お知らせ設定)",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK"),
            @ApiResponse(responseCode = "400", description = "Bad Validation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/notifications",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> deleteSelectedNotifications(
        @Parameter(name = "SelectedIds", description = "") @Valid @RequestBody(required = false) SelectedIds selectedIds
    );


    /**
     * PUT /notifications/{id} : Edit a notification (お知らせ設定)
     * # Edit new notification 
     *
     * @param id ID of the resource (required)
     * @param notificationUpsertDto  (optional)
     * @return Save notifications successfully (status code 200)
     *         or Bad Validation (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Unauthorized (status code 404)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "editNewNotification",
        summary = "Edit a notification (お知らせ設定)",
        description = "# Edit new notification ",
        responses = {
            @ApiResponse(responseCode = "200", description = "Save notifications successfully"),
            @ApiResponse(responseCode = "400", description = "Bad Validation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/notifications/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> editNewNotification(
        @Parameter(name = "id", description = "ID of the resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "NotificationUpsertDto", description = "") @Valid @RequestBody(required = false) NotificationUpsertDto notificationUpsertDto
    );


    /**
     * GET /notifications/{id} : Get all notification details (お知らせ設定)
     * # Get details of a notification 
     *
     * @param id ID of the resource (required)
     * @return Get details of a notification (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Unauthorized (status code 404)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "getNotificationDetails",
        summary = "Get all notification details (お知らせ設定)",
        description = "# Get details of a notification ",
        responses = {
            @ApiResponse(responseCode = "200", description = "Get details of a notification", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = NotificationDetailsDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/notifications/{id}",
        produces = { "application/json" }
    )
    
    ResponseEntity<NotificationDetailsDto> getNotificationDetails(
        @Parameter(name = "id", description = "ID of the resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    );


    /**
     * GET /notifications : Get all notifications (お知らせ設定)
     * # Get all notifications 
     *
     * @param pageNumber Page number (optional)
     * @param pageSize Number of items per page (optional)
     * @param searchInput search input for get list api (optional)
     * @return Get list successfully (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "getNotificationList",
        summary = "Get all notifications (お知らせ設定)",
        description = "# Get all notifications ",
        responses = {
            @ApiResponse(responseCode = "200", description = "Get list successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = NotificationListDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/notifications",
        produces = { "application/json" }
    )
    
    ResponseEntity<NotificationListDto> getNotificationList(
        @Min(1) @Parameter(name = "pageNumber", description = "Page number", in = ParameterIn.QUERY) @Valid @RequestParam(value = "pageNumber", required = false) Integer pageNumber,
        @Min(1) @Parameter(name = "pageSize", description = "Number of items per page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "pageSize", required = false) Integer pageSize,
        @Parameter(name = "searchInput", description = "search input for get list api", in = ParameterIn.QUERY) @Valid @RequestParam(value = "searchInput", required = false) String searchInput
    );

}
