/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.10.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package jp.co.goalist.gsc.gen.apis;

import jp.co.goalist.gsc.gen.dtos.ClientBranchDataItemsDto;
import jp.co.goalist.gsc.gen.dtos.ClientBranchDetailsDto;
import jp.co.goalist.gsc.gen.dtos.ClientBranchListDto;
import jp.co.goalist.gsc.gen.dtos.ClientBranchUpsertDto;
import jp.co.goalist.gsc.gen.dtos.ClientStoreDetailsDto;
import jp.co.goalist.gsc.gen.dtos.ClientStoreListDto;
import jp.co.goalist.gsc.gen.dtos.ClientStoreUpsertDto;
import jp.co.goalist.gsc.gen.dtos.ClientUserAccountDetailsDto;
import jp.co.goalist.gsc.gen.dtos.ClientUserAccountListDto;
import jp.co.goalist.gsc.gen.dtos.ClientUserAccountUpsertDto;
import jp.co.goalist.gsc.gen.dtos.ErrorResponse;
import jp.co.goalist.gsc.gen.dtos.MasterDataStatusItemsDto;
import jp.co.goalist.gsc.gen.dtos.MasterDataStatusUpsertDto;
import jp.co.goalist.gsc.gen.dtos.MasterInterviewCategoryItemsDto;
import jp.co.goalist.gsc.gen.dtos.MasterInterviewCategoryUpsertDto;
import jp.co.goalist.gsc.gen.dtos.MasterMediaDetailsDto;
import jp.co.goalist.gsc.gen.dtos.MasterMediaListDto;
import jp.co.goalist.gsc.gen.dtos.MasterMediaReportListDto;
import jp.co.goalist.gsc.gen.dtos.MasterMediaReportUpsertDto;
import jp.co.goalist.gsc.gen.dtos.MasterMediaUpsertDto;
import jp.co.goalist.gsc.gen.dtos.MasterMonthlyCostItemsDto;
import jp.co.goalist.gsc.gen.dtos.MasterMonthlyCostUpsertDto;
import jp.co.goalist.gsc.gen.dtos.MasterSelectionStatusItemsDto;
import jp.co.goalist.gsc.gen.dtos.MasterSelectionStatusUpsertDto;
import jp.co.goalist.gsc.gen.dtos.SelectedIds;
import jp.co.goalist.gsc.gen.dtos.SurveyAnswersListDto;
import jp.co.goalist.gsc.gen.dtos.SurveyDetailsDto;
import jp.co.goalist.gsc.gen.dtos.SurveyLinkDto;
import jp.co.goalist.gsc.gen.dtos.SurveyLinkRequestDto;
import jp.co.goalist.gsc.gen.dtos.SurveyListDto;
import jp.co.goalist.gsc.gen.dtos.SurveySearchDto;
import jp.co.goalist.gsc.gen.dtos.SurveyStatisticDto;
import jp.co.goalist.gsc.gen.dtos.SurveyStatisticSearchDto;
import jp.co.goalist.gsc.gen.dtos.SurveyUpsertDto;
import jp.co.goalist.gsc.gen.dtos.TemplateDetailsDto;
import jp.co.goalist.gsc.gen.dtos.TemplateListDto;
import jp.co.goalist.gsc.gen.dtos.TemplateSearchDto;
import jp.co.goalist.gsc.gen.dtos.TemplateUpsertDto;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Validated
@Tag(name = "clients", description = "the clients API")
@SuppressWarnings("unused")
public interface ClientsApi {

    /**
     * POST /clients/branches : Create a new branch for client accounts (クライアント・支店)
     * # Create a new branch by client accounts 
     *
     * @param clientBranchUpsertDto  (required)
     * @return Create successfully (status code 201)
     *         or Invalid input (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "createClientBranch",
        summary = "Create a new branch for client accounts (クライアント・支店)",
        description = "# Create a new branch by client accounts ",
        responses = {
            @ApiResponse(responseCode = "201", description = "Create successfully"),
            @ApiResponse(responseCode = "400", description = "Invalid input", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/clients/branches",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> createClientBranch(
        @Parameter(name = "ClientBranchUpsertDto", description = "", required = true) @Valid @RequestBody ClientBranchUpsertDto clientBranchUpsertDto
    );


    /**
     * POST /clients/stores : Create a store by client accounts (クライアント・拠点・店舗名)
     * # Create a store by client accounts 
     *
     * @param clientStoreUpsertDto  (required)
     * @return Created successfully (status code 201)
     *         or Invalid input (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "createClientStore",
        summary = "Create a store by client accounts (クライアント・拠点・店舗名)",
        description = "# Create a store by client accounts ",
        responses = {
            @ApiResponse(responseCode = "201", description = "Created successfully"),
            @ApiResponse(responseCode = "400", description = "Invalid input", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/clients/stores",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> createClientStore(
        @Parameter(name = "ClientStoreUpsertDto", description = "", required = true) @Valid @RequestBody ClientStoreUpsertDto clientStoreUpsertDto
    );


    /**
     * POST /clients/users : Create a new client user
     * # Create a new client user 
     *
     * @param clientUserAccountUpsertDto  (required)
     * @return Created successfully (status code 201)
     *         or Invalid input (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "createClientUserAccount",
        summary = "Create a new client user",
        description = "# Create a new client user ",
        responses = {
            @ApiResponse(responseCode = "201", description = "Created successfully"),
            @ApiResponse(responseCode = "400", description = "Invalid input", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/clients/users",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> createClientUserAccount(
        @Parameter(name = "ClientUserAccountUpsertDto", description = "", required = true) @Valid @RequestBody ClientUserAccountUpsertDto clientUserAccountUpsertDto
    );


    /**
     * POST /clients/master-data/medias : Create a master media (媒体マスタ登録)
     * # Create a master media 
     *
     * @param masterMediaUpsertDto  (required)
     * @return Save notifications successfully (status code 201)
     *         or Bad Validation (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Unauthorized (status code 404)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "createMasterMedia",
        summary = "Create a master media (媒体マスタ登録)",
        description = "# Create a master media ",
        responses = {
            @ApiResponse(responseCode = "201", description = "Save notifications successfully"),
            @ApiResponse(responseCode = "400", description = "Bad Validation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/clients/master-data/medias",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> createMasterMedia(
        @Parameter(name = "MasterMediaUpsertDto", description = "", required = true) @Valid @RequestBody MasterMediaUpsertDto masterMediaUpsertDto
    );


    /**
     * POST /clients/surveys : Create a survey (アンケート管理)
     * # Create new survey 
     *
     * @param surveyUpsertDto  (optional)
     * @return Save successfully (status code 201)
     *         or Bad Validation (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Unauthorized (status code 404)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "createNewSurvey",
        summary = "Create a survey (アンケート管理)",
        description = "# Create new survey ",
        responses = {
            @ApiResponse(responseCode = "201", description = "Save successfully"),
            @ApiResponse(responseCode = "400", description = "Bad Validation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/clients/surveys",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> createNewSurvey(
        @Parameter(name = "SurveyUpsertDto", description = "") @Valid @RequestBody(required = false) SurveyUpsertDto surveyUpsertDto
    );


    /**
     * POST /clients/templates : Create a template (テンプレート管理)
     * # Create new template 
     *
     * @param templateUpsertDto  (optional)
     * @return Saved successfully (status code 201)
     *         or Bad Validation (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Unauthorized (status code 404)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "createTemplate",
        summary = "Create a template (テンプレート管理)",
        description = "# Create new template ",
        responses = {
            @ApiResponse(responseCode = "201", description = "Saved successfully"),
            @ApiResponse(responseCode = "400", description = "Bad Validation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/clients/templates",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> createTemplate(
        @Parameter(name = "TemplateUpsertDto", description = "") @Valid @RequestBody(required = false) TemplateUpsertDto templateUpsertDto
    );


    /**
     * DELETE /clients/branches : Delete selected branches (クライアント・支店)
     *
     * @param selectedIds  (optional)
     * @return Delete successfully (status code 204)
     *         or Bad Validation (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "deleteSelectedBranches",
        summary = "Delete selected branches (クライアント・支店)",
        responses = {
            @ApiResponse(responseCode = "204", description = "Delete successfully"),
            @ApiResponse(responseCode = "400", description = "Bad Validation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/clients/branches",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> deleteSelectedBranches(
        @Parameter(name = "SelectedIds", description = "") @Valid @RequestBody(required = false) SelectedIds selectedIds
    );


    /**
     * DELETE /clients/stores : Delete selected stores by client accounts (クライアント・拠点・店舗名)
     *
     * @param selectedIds  (required)
     * @return Delete successfully (status code 204)
     *         or Bad Validation (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "deleteSelectedStores",
        summary = "Delete selected stores by client accounts (クライアント・拠点・店舗名)",
        responses = {
            @ApiResponse(responseCode = "204", description = "Delete successfully"),
            @ApiResponse(responseCode = "400", description = "Bad Validation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/clients/stores",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> deleteSelectedStores(
        @Parameter(name = "SelectedIds", description = "", required = true) @Valid @RequestBody SelectedIds selectedIds
    );


    /**
     * DELETE /clients/surveys : Delete selected survey (アンケート管理)
     *
     * @param selectedIds  (optional)
     * @return OK (status code 200)
     *         or Bad Validation (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "deleteSelectedSurveys",
        summary = "Delete selected survey (アンケート管理)",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK"),
            @ApiResponse(responseCode = "400", description = "Bad Validation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/clients/surveys",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> deleteSelectedSurveys(
        @Parameter(name = "SelectedIds", description = "") @Valid @RequestBody(required = false) SelectedIds selectedIds
    );


    /**
     * DELETE /clients/templates : Delete selected templates (テンプレート管理)
     *
     * @param selectedIds  (optional)
     * @return OK (status code 200)
     *         or Bad Validation (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "deleteSelectedTemplates",
        summary = "Delete selected templates (テンプレート管理)",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK"),
            @ApiResponse(responseCode = "400", description = "Bad Validation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/clients/templates",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> deleteSelectedTemplates(
        @Parameter(name = "SelectedIds", description = "") @Valid @RequestBody(required = false) SelectedIds selectedIds
    );


    /**
     * PUT /clients/branches/{id} : Edit a branch (支店)
     * # Edit a branch 
     *
     * @param id ID of the resource (required)
     * @param clientBranchUpsertDto  (required)
     * @return Updated successfully (status code 200)
     *         or Invalid input (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Unauthorized (status code 404)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "editClientBranch",
        summary = "Edit a branch (支店)",
        description = "# Edit a branch ",
        responses = {
            @ApiResponse(responseCode = "200", description = "Updated successfully"),
            @ApiResponse(responseCode = "400", description = "Invalid input", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/clients/branches/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> editClientBranch(
        @Parameter(name = "id", description = "ID of the resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "ClientBranchUpsertDto", description = "", required = true) @Valid @RequestBody ClientBranchUpsertDto clientBranchUpsertDto
    );


    /**
     * PUT /clients/stores/{id} : Edit a store (クライアント・拠点・店舗名)
     * # Edit a store 
     *
     * @param id ID of the resource (required)
     * @param clientStoreUpsertDto  (required)
     * @return Updated successfully (status code 200)
     *         or Invalid input (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Unauthorized (status code 404)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "editClientStore",
        summary = "Edit a store (クライアント・拠点・店舗名)",
        description = "# Edit a store ",
        responses = {
            @ApiResponse(responseCode = "200", description = "Updated successfully"),
            @ApiResponse(responseCode = "400", description = "Invalid input", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/clients/stores/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> editClientStore(
        @Parameter(name = "id", description = "ID of the resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "ClientStoreUpsertDto", description = "", required = true) @Valid @RequestBody ClientStoreUpsertDto clientStoreUpsertDto
    );


    /**
     * PUT /clients/users/{accountId} : Edit a new client user
     * # Edit a new client user 
     *
     * @param accountId ID of the resource (required)
     * @param clientUserAccountUpsertDto  (required)
     * @return Updated successfully (status code 200)
     *         or Invalid input (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Unauthorized (status code 404)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "editClientUserAccount",
        summary = "Edit a new client user",
        description = "# Edit a new client user ",
        responses = {
            @ApiResponse(responseCode = "200", description = "Updated successfully"),
            @ApiResponse(responseCode = "400", description = "Invalid input", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/clients/users/{accountId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> editClientUserAccount(
        @Parameter(name = "accountId", description = "ID of the resource", required = true, in = ParameterIn.PATH) @PathVariable("accountId") String accountId,
        @Parameter(name = "ClientUserAccountUpsertDto", description = "", required = true) @Valid @RequestBody ClientUserAccountUpsertDto clientUserAccountUpsertDto
    );


    /**
     * PUT /clients/master-data/medias/{id} : Edit a master media (媒体マスタ登録)
     * # Edit a master media 
     *
     * @param id ID of the resource (required)
     * @param masterMediaUpsertDto  (optional)
     * @return Save notifications successfully (status code 201)
     *         or Bad Validation (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Unauthorized (status code 404)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "editMasterMedia",
        summary = "Edit a master media (媒体マスタ登録)",
        description = "# Edit a master media ",
        responses = {
            @ApiResponse(responseCode = "201", description = "Save notifications successfully"),
            @ApiResponse(responseCode = "400", description = "Bad Validation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/clients/master-data/medias/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> editMasterMedia(
        @Parameter(name = "id", description = "ID of the resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "MasterMediaUpsertDto", description = "") @Valid @RequestBody(required = false) MasterMediaUpsertDto masterMediaUpsertDto
    );


    /**
     * PUT /clients/surveys/{id} : Edit a survey (アンケート管理)
     * # Edit new survey 
     *
     * @param id ID of the resource (required)
     * @param surveyUpsertDto  (optional)
     * @return Save successfully (status code 200)
     *         or Bad Validation (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Unauthorized (status code 404)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "editSurvey",
        summary = "Edit a survey (アンケート管理)",
        description = "# Edit new survey ",
        responses = {
            @ApiResponse(responseCode = "200", description = "Save successfully"),
            @ApiResponse(responseCode = "400", description = "Bad Validation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/clients/surveys/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> editSurvey(
        @Parameter(name = "id", description = "ID of the resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "SurveyUpsertDto", description = "") @Valid @RequestBody(required = false) SurveyUpsertDto surveyUpsertDto
    );


    /**
     * PUT /clients/templates/{id} : Edit a template (テンプレート管理)
     * # Edit new template 
     *
     * @param id ID of the resource (required)
     * @param templateUpsertDto  (optional)
     * @return Updated successfully (status code 200)
     *         or Bad Validation (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Unauthorized (status code 404)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "editTemplate",
        summary = "Edit a template (テンプレート管理)",
        description = "# Edit new template ",
        responses = {
            @ApiResponse(responseCode = "200", description = "Updated successfully"),
            @ApiResponse(responseCode = "400", description = "Bad Validation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/clients/templates/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> editTemplate(
        @Parameter(name = "id", description = "ID of the resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "TemplateUpsertDto", description = "") @Valid @RequestBody(required = false) TemplateUpsertDto templateUpsertDto
    );


    /**
     * GET /clients/branches/{id} : Get branch information for client accounts (クライアント・支店)
     * # Get branch information for client accounts 
     *
     * @param id ID of the resource (required)
     * @return Get successfully (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Unauthorized (status code 404)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "getClientBranchDetails",
        summary = "Get branch information for client accounts (クライアント・支店)",
        description = "# Get branch information for client accounts ",
        responses = {
            @ApiResponse(responseCode = "200", description = "Get successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ClientBranchDetailsDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/clients/branches/{id}",
        produces = { "application/json" }
    )
    
    ResponseEntity<ClientBranchDetailsDto> getClientBranchDetails(
        @Parameter(name = "id", description = "ID of the resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    );


    /**
     * GET /clients/branches/related-data : Get all branches for client accounts (クライアント・支店・職種権限)
     * # Get all related data for a client branch 
     *
     * @return Get list successfully (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "getClientBranchRelatedData",
        summary = "Get all branches for client accounts (クライアント・支店・職種権限)",
        description = "# Get all related data for a client branch ",
        responses = {
            @ApiResponse(responseCode = "200", description = "Get list successfully", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ClientBranchDataItemsDto.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/clients/branches/related-data",
        produces = { "application/json" }
    )
    
    ResponseEntity<List<ClientBranchDataItemsDto>> getClientBranchRelatedData(
        
    );


    /**
     * GET /clients/branches : Get all branches for client accounts (クライアント・支店)
     * # Get all branches for client accounts 
     *
     * @param pageNumber Page number (optional)
     * @param pageSize Number of items per page (optional)
     * @param searchInput search input for get list api (optional)
     * @return Get list successfully (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "getClientBranches",
        summary = "Get all branches for client accounts (クライアント・支店)",
        description = "# Get all branches for client accounts ",
        responses = {
            @ApiResponse(responseCode = "200", description = "Get list successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ClientBranchListDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/clients/branches",
        produces = { "application/json" }
    )
    
    ResponseEntity<ClientBranchListDto> getClientBranches(
        @Min(1) @Parameter(name = "pageNumber", description = "Page number", in = ParameterIn.QUERY) @Valid @RequestParam(value = "pageNumber", required = false) Integer pageNumber,
        @Min(1) @Parameter(name = "pageSize", description = "Number of items per page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "pageSize", required = false) Integer pageSize,
        @Parameter(name = "searchInput", description = "search input for get list api", in = ParameterIn.QUERY) @Valid @RequestParam(value = "searchInput", required = false) String searchInput
    );


    /**
     * GET /clients/stores/{id} : Get store information (クライアント・拠点・店舗名)
     * # Get store information 
     *
     * @param id ID of the resource (required)
     * @return Get successfully (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Unauthorized (status code 404)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "getClientStoreDetails",
        summary = "Get store information (クライアント・拠点・店舗名)",
        description = "# Get store information ",
        responses = {
            @ApiResponse(responseCode = "200", description = "Get successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ClientStoreDetailsDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/clients/stores/{id}",
        produces = { "application/json" }
    )
    
    ResponseEntity<ClientStoreDetailsDto> getClientStoreDetails(
        @Parameter(name = "id", description = "ID of the resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    );


    /**
     * GET /clients/stores : Get all stores by client accounts (クライアント・拠点・店舗名)
     * # Get all stores by client accounts 
     *
     * @param branchId 支店 (required)
     * @param pageNumber Page number (optional)
     * @param pageSize Number of items per page (optional)
     * @param searchInput search input for get list api (optional)
     * @return Get list successfully (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "getClientStores",
        summary = "Get all stores by client accounts (クライアント・拠点・店舗名)",
        description = "# Get all stores by client accounts ",
        responses = {
            @ApiResponse(responseCode = "200", description = "Get list successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ClientStoreListDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/clients/stores",
        produces = { "application/json" }
    )
    
    ResponseEntity<ClientStoreListDto> getClientStores(
        @NotNull @Parameter(name = "branchId", description = "支店", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "branchId", required = true) String branchId,
        @Min(1) @Parameter(name = "pageNumber", description = "Page number", in = ParameterIn.QUERY) @Valid @RequestParam(value = "pageNumber", required = false) Integer pageNumber,
        @Min(1) @Parameter(name = "pageSize", description = "Number of items per page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "pageSize", required = false) Integer pageSize,
        @Parameter(name = "searchInput", description = "search input for get list api", in = ParameterIn.QUERY) @Valid @RequestParam(value = "searchInput", required = false) String searchInput
    );


    /**
     * GET /clients/users/{accountId} : Get client user account (社内ユーザー)
     * # Get client user account 
     *
     * @param accountId ID of the resource (required)
     * @return Get successfully (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Unauthorized (status code 404)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "getClientUserAccountDetails",
        summary = "Get client user account (社内ユーザー)",
        description = "# Get client user account ",
        responses = {
            @ApiResponse(responseCode = "200", description = "Get successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ClientUserAccountDetailsDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/clients/users/{accountId}",
        produces = { "application/json" }
    )
    
    ResponseEntity<ClientUserAccountDetailsDto> getClientUserAccountDetails(
        @Parameter(name = "accountId", description = "ID of the resource", required = true, in = ParameterIn.PATH) @PathVariable("accountId") String accountId
    );


    /**
     * GET /clients/users : Get all client users (社内ユーザー)
     * # Get all client users 
     *
     * @param pageNumber Page number (optional)
     * @param pageSize Number of items per page (optional)
     * @param searchInput search input for get list api (optional)
     * @return Get list successfully (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "getClientUserAccounts",
        summary = "Get all client users (社内ユーザー)",
        description = "# Get all client users ",
        responses = {
            @ApiResponse(responseCode = "200", description = "Get list successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ClientUserAccountListDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/clients/users",
        produces = { "application/json" }
    )
    
    ResponseEntity<ClientUserAccountListDto> getClientUserAccounts(
        @Min(1) @Parameter(name = "pageNumber", description = "Page number", in = ParameterIn.QUERY) @Valid @RequestParam(value = "pageNumber", required = false) Integer pageNumber,
        @Min(1) @Parameter(name = "pageSize", description = "Number of items per page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "pageSize", required = false) Integer pageSize,
        @Parameter(name = "searchInput", description = "search input for get list api", in = ParameterIn.QUERY) @Valid @RequestParam(value = "searchInput", required = false) String searchInput
    );


    /**
     * GET /clients/master-data/interview-categories : Get all interview categories (面接)
     * # Get all master interview categories Get list of interview categories based on currentUser.oemGroupId  
     *
     * @return Get list successfully (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "getInterviewCategories",
        summary = "Get all interview categories (面接)",
        description = "# Get all master interview categories Get list of interview categories based on currentUser.oemGroupId  ",
        responses = {
            @ApiResponse(responseCode = "200", description = "Get list successfully", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = MasterInterviewCategoryItemsDto.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/clients/master-data/interview-categories",
        produces = { "application/json" }
    )
    
    ResponseEntity<List<MasterInterviewCategoryItemsDto>> getInterviewCategories(
        
    );


    /**
     * GET /clients/master-data/status/{statusType} : Get all master data statuses (マスターデータ)
     * # Get all master data statuses based on status type 
     *
     * @param statusType 案件ステータスenum - 職種 / OCCUPATION - 雇用形態 / EMPLOYMENT_TYPE - 勤務期間 / WORK_PERIOD - 面接会場 / INTERVIEW_LOC - 資格 / QUALIFICATION  (required)
     * @return Get list successfully (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "getMasterDataStatuses",
        summary = "Get all master data statuses (マスターデータ)",
        description = "# Get all master data statuses based on status type ",
        responses = {
            @ApiResponse(responseCode = "200", description = "Get list successfully", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = MasterDataStatusItemsDto.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/clients/master-data/status/{statusType}",
        produces = { "application/json" }
    )
    
    ResponseEntity<List<MasterDataStatusItemsDto>> getMasterDataStatuses(
        @Parameter(name = "statusType", description = "案件ステータスenum - 職種 / OCCUPATION - 雇用形態 / EMPLOYMENT_TYPE - 勤務期間 / WORK_PERIOD - 面接会場 / INTERVIEW_LOC - 資格 / QUALIFICATION ", required = true, in = ParameterIn.PATH) @PathVariable("statusType") String statusType
    );


    /**
     * GET /clients/master-data/medias/{id} : Get media details (媒体マスタ登録)
     * # Get media details 
     *
     * @param id ID of the resource (required)
     * @return Get all notifications (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "getMasterMediaDetails",
        summary = "Get media details (媒体マスタ登録)",
        description = "# Get media details ",
        responses = {
            @ApiResponse(responseCode = "200", description = "Get all notifications", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MasterMediaDetailsDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/clients/master-data/medias/{id}",
        produces = { "application/json" }
    )
    
    ResponseEntity<MasterMediaDetailsDto> getMasterMediaDetails(
        @Parameter(name = "id", description = "ID of the resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    );


    /**
     * GET /clients/master-data/medias : Get all medias (媒体マスタ登録)
     * # Get all notifications 
     *
     * @param pageNumber Page number (optional)
     * @param pageSize Number of items per page (optional)
     * @param searchInput search input for get list api (optional)
     * @return Get all notifications (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "getMasterMedias",
        summary = "Get all medias (媒体マスタ登録)",
        description = "# Get all notifications ",
        responses = {
            @ApiResponse(responseCode = "200", description = "Get all notifications", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MasterMediaListDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/clients/master-data/medias",
        produces = { "application/json" }
    )
    
    ResponseEntity<MasterMediaListDto> getMasterMedias(
        @Min(1) @Parameter(name = "pageNumber", description = "Page number", in = ParameterIn.QUERY) @Valid @RequestParam(value = "pageNumber", required = false) Integer pageNumber,
        @Min(1) @Parameter(name = "pageSize", description = "Number of items per page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "pageSize", required = false) Integer pageSize,
        @Parameter(name = "searchInput", description = "search input for get list api", in = ParameterIn.QUERY) @Valid @RequestParam(value = "searchInput", required = false) String searchInput
    );


    /**
     * GET /clients/master-data/media-report : Get media report settings (媒体レポート)
     * # Get media report settings 
     *
     * @return Get list successfully (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "getMediaReportSettings",
        summary = "Get media report settings (媒体レポート)",
        description = "# Get media report settings ",
        responses = {
            @ApiResponse(responseCode = "200", description = "Get list successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MasterMediaReportListDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/clients/master-data/media-report",
        produces = { "application/json" }
    )
    
    ResponseEntity<MasterMediaReportListDto> getMediaReportSettings(
        
    );


    /**
     * GET /clients/master-data/monthly-cost : Get list of monthly cost (月間コスト登録)
     * # Get media report settings 
     *
     * @param selectedDate selected date (required)
     * @return Get list successfully (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "getMonthlyCost",
        summary = "Get list of monthly cost (月間コスト登録)",
        description = "# Get media report settings ",
        responses = {
            @ApiResponse(responseCode = "200", description = "Get list successfully", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = MasterMonthlyCostItemsDto.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/clients/master-data/monthly-cost",
        produces = { "application/json" }
    )
    
    ResponseEntity<List<MasterMonthlyCostItemsDto>> getMonthlyCost(
        @NotNull @Parameter(name = "selectedDate", description = "selected date", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "selectedDate", required = true) String selectedDate
    );


    /**
     * GET /clients/master-data/selection-status : Get all statuses (選考ステータス)
     * # Get all statuses 
     *
     * @return Get list successfully (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "getSelectionStatuses",
        summary = "Get all statuses (選考ステータス)",
        description = "# Get all statuses ",
        responses = {
            @ApiResponse(responseCode = "200", description = "Get list successfully", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = MasterSelectionStatusItemsDto.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/clients/master-data/selection-status",
        produces = { "application/json" }
    )
    
    ResponseEntity<List<MasterSelectionStatusItemsDto>> getSelectionStatuses(
        
    );


    /**
     * GET /clients/surveys/{id} : Get all survey details (アンケート管理)
     * # Get details of a survey 
     *
     * @param id ID of the resource (required)
     * @return Get successfully (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Unauthorized (status code 404)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "getSurveyDetails",
        summary = "Get all survey details (アンケート管理)",
        description = "# Get details of a survey ",
        responses = {
            @ApiResponse(responseCode = "200", description = "Get successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SurveyDetailsDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/clients/surveys/{id}",
        produces = { "application/json" }
    )
    
    ResponseEntity<SurveyDetailsDto> getSurveyDetails(
        @Parameter(name = "id", description = "ID of the resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    );


    /**
     * POST /clients/surveys/list : Get all surveys (アンケート管理)
     * # Get all surveys 
     *
     * @param surveySearchDto  (optional)
     * @return Get list successfully (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "getSurveyList",
        summary = "Get all surveys (アンケート管理)",
        description = "# Get all surveys ",
        responses = {
            @ApiResponse(responseCode = "200", description = "Get list successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SurveyListDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/clients/surveys/list",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<SurveyListDto> getSurveyList(
        @Parameter(name = "SurveySearchDto", description = "") @Valid @RequestBody(required = false) SurveySearchDto surveySearchDto
    );


    /**
     * POST /clients/surveys/public-link : Get survey public link (アンケートリンク)
     * # Get survey public link 
     *
     * @param surveyLinkRequestDto  (optional)
     * @return Get list successfully (status code 200)
     *         or Invalid input (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "getSurveyPublicLink",
        summary = "Get survey public link (アンケートリンク)",
        description = "# Get survey public link ",
        responses = {
            @ApiResponse(responseCode = "200", description = "Get list successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SurveyLinkDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid input", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/clients/surveys/public-link",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<SurveyLinkDto> getSurveyPublicLink(
        @Parameter(name = "SurveyLinkRequestDto", description = "") @Valid @RequestBody(required = false) SurveyLinkRequestDto surveyLinkRequestDto
    );


    /**
     * POST /clients/survey-statistic/{surveyId}/answers : Get list Survey group by Applicants
     * # Get list Survey group by Applicants 
     *
     * @param surveyId ID of the Survey (required)
     * @param surveyStatisticSearchDto  (optional)
     * @return Get successfully (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "getSurveyStatisticAnswers",
        summary = "Get list Survey group by Applicants",
        description = "# Get list Survey group by Applicants ",
        responses = {
            @ApiResponse(responseCode = "200", description = "Get successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SurveyAnswersListDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/clients/survey-statistic/{surveyId}/answers",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<SurveyAnswersListDto> getSurveyStatisticAnswers(
        @Parameter(name = "surveyId", description = "ID of the Survey", required = true, in = ParameterIn.PATH) @PathVariable("surveyId") String surveyId,
        @Parameter(name = "SurveyStatisticSearchDto", description = "") @Valid @RequestBody(required = false) SurveyStatisticSearchDto surveyStatisticSearchDto
    );


    /**
     * GET /clients/survey-statistic/{surveyId}/summary : Get all survey statistic
     * # Get all survey statistics 
     *
     * @param surveyId ID of the Survey (required)
     * @return Get successfully (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "getSurveyStatisticsSummary",
        summary = "Get all survey statistic",
        description = "# Get all survey statistics ",
        responses = {
            @ApiResponse(responseCode = "200", description = "Get successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SurveyStatisticDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/clients/survey-statistic/{surveyId}/summary",
        produces = { "application/json" }
    )
    
    ResponseEntity<SurveyStatisticDto> getSurveyStatisticsSummary(
        @Parameter(name = "surveyId", description = "ID of the Survey", required = true, in = ParameterIn.PATH) @PathVariable("surveyId") String surveyId
    );


    /**
     * GET /clients/templates/{id} : Get template details (テンプレート管理)
     * # Get details of a template 
     *
     * @param id ID of the resource (required)
     * @return Get successfully (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Unauthorized (status code 404)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "getTemplateDetails",
        summary = "Get template details (テンプレート管理)",
        description = "# Get details of a template ",
        responses = {
            @ApiResponse(responseCode = "200", description = "Get successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TemplateDetailsDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/clients/templates/{id}",
        produces = { "application/json" }
    )
    
    ResponseEntity<TemplateDetailsDto> getTemplateDetails(
        @Parameter(name = "id", description = "ID of the resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    );


    /**
     * POST /clients/templates/list : Get all templates (テンプレート管理)
     * # Get all templates 
     *
     * @param templateSearchDto  (optional)
     * @return Get list successfully (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "getTemplateList",
        summary = "Get all templates (テンプレート管理)",
        description = "# Get all templates ",
        responses = {
            @ApiResponse(responseCode = "200", description = "Get list successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TemplateListDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/clients/templates/list",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<TemplateListDto> getTemplateList(
        @Parameter(name = "TemplateSearchDto", description = "") @Valid @RequestBody(required = false) TemplateSearchDto templateSearchDto
    );


    /**
     * POST /clients/master-data/interview-categories : Create list of interview categories (面接)
     * # Create list of interview categories 
     *
     * @param masterInterviewCategoryUpsertDto  (required)
     * @return Create list successfully (status code 201)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "upsertInterviewCategories",
        summary = "Create list of interview categories (面接)",
        description = "# Create list of interview categories ",
        responses = {
            @ApiResponse(responseCode = "201", description = "Create list successfully"),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/clients/master-data/interview-categories",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> upsertInterviewCategories(
        @Parameter(name = "MasterInterviewCategoryUpsertDto", description = "", required = true) @Valid @RequestBody List<@Valid MasterInterviewCategoryUpsertDto> masterInterviewCategoryUpsertDto
    );


    /**
     * POST /clients/master-data/status/{statusType} : Create list of master data statuses (マスターデータ)
     * # Create list of project statuses 
     *
     * @param statusType 案件ステータスenum - 職種 / OCCUPATION - 雇用形態 / EMPLOYMENT_TYPE - 勤務期間 / WORK_PERIOD - 面接会場 / INTERVIEW_LOC - 資格 / QUALIFICATION  (required)
     * @param masterDataStatusUpsertDto  (required)
     * @return Created successfully (status code 201)
     *         or Invalid input (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "upsertMasterDataStatuses",
        summary = "Create list of master data statuses (マスターデータ)",
        description = "# Create list of project statuses ",
        responses = {
            @ApiResponse(responseCode = "201", description = "Created successfully"),
            @ApiResponse(responseCode = "400", description = "Invalid input", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/clients/master-data/status/{statusType}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> upsertMasterDataStatuses(
        @Parameter(name = "statusType", description = "案件ステータスenum - 職種 / OCCUPATION - 雇用形態 / EMPLOYMENT_TYPE - 勤務期間 / WORK_PERIOD - 面接会場 / INTERVIEW_LOC - 資格 / QUALIFICATION ", required = true, in = ParameterIn.PATH) @PathVariable("statusType") String statusType,
        @Parameter(name = "MasterDataStatusUpsertDto", description = "", required = true) @Valid @RequestBody List<@Valid MasterDataStatusUpsertDto> masterDataStatusUpsertDto
    );


    /**
     * POST /clients/master-data/media-report : Create/Update list of media report settings (媒体レポート)
     * # Create list of media report settings 
     *
     * @param masterMediaReportUpsertDto  (required)
     * @return Created successfully (status code 201)
     *         or Invalid input (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "upsertMediaReportSettings",
        summary = "Create/Update list of media report settings (媒体レポート)",
        description = "# Create list of media report settings ",
        responses = {
            @ApiResponse(responseCode = "201", description = "Created successfully"),
            @ApiResponse(responseCode = "400", description = "Invalid input", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/clients/master-data/media-report",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> upsertMediaReportSettings(
        @Parameter(name = "MasterMediaReportUpsertDto", description = "", required = true) @Valid @RequestBody MasterMediaReportUpsertDto masterMediaReportUpsertDto
    );


    /**
     * POST /clients/master-data/monthly-cost : Create list of monthly cost (月間コスト登録)
     * # Create list of media report settings 
     *
     * @param selectedDate selected date (required)
     * @param masterMonthlyCostUpsertDto  (required)
     * @return Created successfully (status code 201)
     *         or Invalid input (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "upsertMonthlyCost",
        summary = "Create list of monthly cost (月間コスト登録)",
        description = "# Create list of media report settings ",
        responses = {
            @ApiResponse(responseCode = "201", description = "Created successfully"),
            @ApiResponse(responseCode = "400", description = "Invalid input", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/clients/master-data/monthly-cost",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> upsertMonthlyCost(
        @NotNull @Parameter(name = "selectedDate", description = "selected date", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "selectedDate", required = true) String selectedDate,
        @Parameter(name = "MasterMonthlyCostUpsertDto", description = "", required = true) @Valid @RequestBody List<@Valid MasterMonthlyCostUpsertDto> masterMonthlyCostUpsertDto
    );


    /**
     * POST /clients/master-data/selection-status : Create list of selection statuses
     * # Create list of selection statuses 
     *
     * @param masterSelectionStatusUpsertDto  (required)
     * @return Created successfully (status code 201)
     *         or Invalid input (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "upsertSelectionStatuses",
        summary = "Create list of selection statuses",
        description = "# Create list of selection statuses ",
        responses = {
            @ApiResponse(responseCode = "201", description = "Created successfully"),
            @ApiResponse(responseCode = "400", description = "Invalid input", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/clients/master-data/selection-status",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> upsertSelectionStatuses(
        @Parameter(name = "MasterSelectionStatusUpsertDto", description = "", required = true) @Valid @RequestBody List<@Valid MasterSelectionStatusUpsertDto> masterSelectionStatusUpsertDto
    );

}
